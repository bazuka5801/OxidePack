<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ether.Network</name>
    </assembly>
    <members>
        <member name="T:Ether.Network.Client.INetClient">
            <summary>
            <see cref="T:Ether.Network.Client.INetClient"/> interface.
            </summary>
        </member>
        <member name="P:Ether.Network.Client.INetClient.Id">
            <summary>
            Gets the <see cref="T:Ether.Network.Client.INetClient"/> unique Id.
            </summary>
        </member>
        <member name="P:Ether.Network.Client.INetClient.IsConnected">
            <summary>
            Gets the <see cref="T:Ether.Network.Client.INetClient"/> connected state.
            </summary>
        </member>
        <member name="P:Ether.Network.Client.INetClient.IsRunning">
            <summary>
            Gets the <see cref="T:Ether.Network.Client.INetClient"/> running state.
            </summary>
        </member>
        <member name="M:Ether.Network.Client.INetClient.Connect">
            <summary>
            Connects to a remote server.
            </summary>
        </member>
        <member name="M:Ether.Network.Client.INetClient.Disconnect">
            <summary>
            Disconnects from the remote server.
            </summary>
        </member>
        <member name="M:Ether.Network.Client.INetClient.Send(Ether.Network.Packets.INetPacketStream)">
            <summary>
            Sends packets to the remote server.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="T:Ether.Network.Client.NetClient">
            <summary>
            Managed TCP client.
            </summary>
        </member>
        <member name="P:Ether.Network.Client.NetClient.PacketProcessor">
            <summary>
            Gets the packet processor.
            </summary>
        </member>
        <member name="P:Ether.Network.Client.NetClient.IsConnected">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Client.NetClient.IsRunning">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Client.NetClient.Configuration">
            <summary>
            Gets the <see cref="T:Ether.Network.Client.NetClient"/> configuration.
            </summary>
        </member>
        <member name="M:Ether.Network.Client.NetClient.#ctor">
            <summary>
            Creates a new <see cref="T:Ether.Network.Client.NetClient"/> instance.
            </summary>
        </member>
        <member name="M:Ether.Network.Client.NetClient.Connect">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Client.NetClient.Disconnect">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Client.NetClient.Send(Ether.Network.Packets.INetPacketStream)">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Client.NetClient.HandleMessage(Ether.Network.Packets.INetPacketStream)">
            <summary>
            Triggered when the <see cref="T:Ether.Network.Client.NetClient"/> receives a packet.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:Ether.Network.Client.NetClient.OnConnected">
            <summary>
            Triggered when the client is connected to the remote end point.
            </summary>
        </member>
        <member name="M:Ether.Network.Client.NetClient.OnDisconnected">
            <summary>
            Triggered when the client is disconnected from the remote end point.
            </summary>
        </member>
        <member name="M:Ether.Network.Client.NetClient.OnSocketError(System.Net.Sockets.SocketError)">
            <summary>
            Triggered when a error on the socket happend
            </summary>
            <param name="socketError"></param>
        </member>
        <member name="M:Ether.Network.Client.NetClient.ProcessSendingQueue">
            <summary>
            Sends the packets in the sending queue.
            </summary>
        </member>
        <member name="M:Ether.Network.Client.NetClient.ProcessReceiveQueue">
            <summary>
            Process and dispatch the received packets.
            </summary>
        </member>
        <member name="M:Ether.Network.Client.NetClient.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Process receieve.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ether.Network.Client.NetClient.CheckConfiguration">
            <summary>
            Checks the configuration.
            </summary>
        </member>
        <member name="M:Ether.Network.Client.NetClient.IO_Completed(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Triggered when a <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> async operation is completed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ether.Network.Client.NetClient.Dispose(System.Boolean)">
            <summary>
            Dispose the <see cref="T:Ether.Network.Client.NetClient"/> instance.
            </summary>
        </member>
        <member name="M:Ether.Network.Client.NetClient.ConnectSocketToServer">
            <summary>
            Connects a socket to a server
            </summary>
            <param name="connectSocket">The socket to connect</param>
            <returns>The socket error</returns>
        </member>
        <member name="T:Ether.Network.Client.NetClientConfiguration">
            <summary>
            Provides properties to configure a <see cref="T:Ether.Network.Client.NetClient"/>.
            </summary>
        </member>
        <member name="P:Ether.Network.Client.NetClientConfiguration.Port">
            <summary>
            Gets or sets the port.
            </summary>
        </member>
        <member name="P:Ether.Network.Client.NetClientConfiguration.BufferSize">
            <summary>
            Gets or sets the buffer size.
            </summary>
        </member>
        <member name="P:Ether.Network.Client.NetClientConfiguration.Host">
            <summary>
            Gets or sets the connecting host.
            </summary>
        </member>
        <member name="P:Ether.Network.Client.NetClientConfiguration.TimeOut">
            <summary>
            Gets or sets the connecting time out.
            </summary>
        </member>
        <member name="P:Ether.Network.Client.NetClientConfiguration.RetryMode">
            <summary>
            Gets or sets how the client handles failed connections.
            When using <see cref="F:Ether.Network.Client.NetClientRetryOptions.Limited"/> set <see cref="P:Ether.Network.Client.NetClientConfiguration.MaxRetryAttempts"/>
            </summary>
        </member>
        <member name="P:Ether.Network.Client.NetClientConfiguration.MaxRetryAttempts">
            <summary>
            Gets or sets the maximum number of times the client will try to reconnect to the server
            </summary>
        </member>
        <member name="P:Ether.Network.Client.NetClientConfiguration.Address">
            <summary>
            Gets the listening address.
            </summary>
        </member>
        <member name="M:Ether.Network.Client.NetClientConfiguration.#ctor(Ether.Network.Client.INetClient)">
            <summary>
            Creates a new <see cref="T:Ether.Network.Client.NetClientConfiguration"/> instance.
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Ether.Network.Client.NetClientConfiguration.SetValue``1(``0@,``0)">
            <summary>
            Set the value of a property passed as reference.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="container"></param>
            <param name="value"></param>
        </member>
        <member name="T:Ether.Network.Client.NetClientRetryOptions">
            <summary>
            Options defining how a <see cref="T:Ether.Network.Client.NetClient"/> will handle a failed connection attempt
            </summary>
        </member>
        <member name="F:Ether.Network.Client.NetClientRetryOptions.OneTime">
            <summary>
            The client will only try to connect one time
            </summary>
        </member>
        <member name="F:Ether.Network.Client.NetClientRetryOptions.Limited">
            <summary>
            The client will try to connect a specific amount of times
            </summary>
        </member>
        <member name="F:Ether.Network.Client.NetClientRetryOptions.Infinite">
            <summary>
            The client will try infinitely to connect to the server
            </summary>
        </member>
        <member name="T:Ether.Network.Common.Data.AsyncUserToken">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Common.Data.AsyncUserToken.ReceivedHeaderBytesCount">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Common.Data.AsyncUserToken.HeaderData">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Common.Data.AsyncUserToken.MessageSize">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Common.Data.AsyncUserToken.ReceivedMessageBytesCount">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Common.Data.AsyncUserToken.MessageData">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Common.Data.AsyncUserToken.DataStartOffset">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Common.Data.AsyncUserToken.Socket">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Common.Data.AsyncUserToken.MessageHandler">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Common.Data.AsyncUserToken.#ctor">
            <summary>
            Creates a new <see cref="T:Ether.Network.Common.Data.AsyncUserToken"/> instance.
            </summary>
        </member>
        <member name="M:Ether.Network.Common.Data.AsyncUserToken.#ctor(System.Action{System.Byte[]})">
            <summary>
            Creates a new <see cref="T:Ether.Network.Common.Data.AsyncUserToken"/> instance.
            </summary>
            <param name="messageHandlerAction">Action to execute when a message is received.</param>
        </member>
        <member name="M:Ether.Network.Common.Data.AsyncUserToken.Reset">
            <inheritdoc />
        </member>
        <member name="T:Ether.Network.Common.Data.IAsyncUserToken">
            <summary>
            Defines the user's async token that contains all informations about data receiving process.
            </summary>
        </member>
        <member name="P:Ether.Network.Common.Data.IAsyncUserToken.ReceivedHeaderBytesCount">
            <summary>
            Gets or sets the number of bytes received of the Header.
            </summary>
        </member>
        <member name="P:Ether.Network.Common.Data.IAsyncUserToken.HeaderData">
            <summary>
            Gets or sets the received header data.
            </summary>
        </member>
        <member name="P:Ether.Network.Common.Data.IAsyncUserToken.MessageSize">
            <summary>
            Gets or sets the full message size.
            </summary>
        </member>
        <member name="P:Ether.Network.Common.Data.IAsyncUserToken.ReceivedMessageBytesCount">
            <summary>
            Gets or sets the number of bytes received of the Message.
            </summary>
        </member>
        <member name="P:Ether.Network.Common.Data.IAsyncUserToken.MessageData">
            <summary>
            Gets or sets the received message data.
            </summary>
        </member>
        <member name="P:Ether.Network.Common.Data.IAsyncUserToken.DataStartOffset">
            <summary>
            Gets or sets the data start offset.
            </summary>
        </member>
        <member name="P:Ether.Network.Common.Data.IAsyncUserToken.Socket">
            <summary>
            Gets or sets the user's socket.
            </summary>
        </member>
        <member name="P:Ether.Network.Common.Data.IAsyncUserToken.MessageHandler">
            <summary>
            Gets or sets the action to invoke when we receive a message.
            </summary>
        </member>
        <member name="M:Ether.Network.Common.Data.IAsyncUserToken.Reset">
            <summary>
            Resets the <see cref="T:Ether.Network.Common.Data.IAsyncUserToken"/>.
            </summary>
        </member>
        <member name="T:Ether.Network.Common.Data.MessageData">
            <summary>
            Defines a structure that handles an incoming message.
            </summary>
        </member>
        <member name="P:Ether.Network.Common.Data.MessageData.User">
            <summary>
            Gets the owner of the incoming message.
            </summary>
        </member>
        <member name="P:Ether.Network.Common.Data.MessageData.Message">
            <summary>
            Gets the incoming message data.
            </summary>
        </member>
        <member name="M:Ether.Network.Common.Data.MessageData.#ctor(Ether.Network.Common.INetUser,System.Byte[])">
            <summary>
            Creates a new <see cref="T:Ether.Network.Common.Data.MessageData"/> instance.
            </summary>
            <param name="user">Message owner</param>
            <param name="message">Message data</param>
        </member>
        <member name="M:Ether.Network.Common.Data.MessageData.Equals(Ether.Network.Common.Data.MessageData)">
            <summary>
            Compares two <see cref="T:Ether.Network.Common.Data.MessageData"/> objects.
            </summary>
            <param name="other">Other <see cref="T:Ether.Network.Common.Data.MessageData"/></param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="T:Ether.Network.Common.INetConnection">
            <summary>
            Describes the behavior of a Ether.Network connection
            </summary>
        </member>
        <member name="P:Ether.Network.Common.INetConnection.Id">
            <summary>
            Gets the connection's unique id.
            </summary>
        </member>
        <member name="P:Ether.Network.Common.INetConnection.Socket">
            <summary>
            Gets the connection's socket.
            </summary>
        </member>
        <member name="T:Ether.Network.Common.INetUser">
            <summary>
            Defines the behavior of an Ether.Network connected user.
            </summary>
        </member>
        <member name="P:Ether.Network.Common.INetUser.Server">
            <summary>
            Gets the <see cref="T:Ether.Network.Server.INetServer"/> instance the <see cref="T:Ether.Network.Common.INetUser"/> is connected to.
            </summary>
        </member>
        <member name="M:Ether.Network.Common.INetUser.Send(Ether.Network.Packets.INetPacketStream)">
            <summary>
            Sends a packet throught the network.
            </summary>
            <param name="packet">Outgoing packet</param>
        </member>
        <member name="M:Ether.Network.Common.INetUser.SendTo(System.Collections.Generic.IEnumerable{Ether.Network.Common.INetUser},Ether.Network.Packets.INetPacketStream)">
            <summary>
            Sends a packet to a list of users.
            </summary>
            <param name="users">List of users</param>
            <param name="packet">Outgoing packet</param>
        </member>
        <member name="M:Ether.Network.Common.INetUser.SendToAll(Ether.Network.Packets.INetPacketStream)">
            <summary>
            Sends a packet to all users on the server.
            </summary>
            <param name="packet">Outgoing packet</param>
        </member>
        <member name="M:Ether.Network.Common.INetUser.HandleMessage(Ether.Network.Packets.INetPacketStream)">
            <summary>
            Handles an incoming message.
            </summary>
            <param name="packet">Incoming packet</param>
        </member>
        <member name="T:Ether.Network.Common.NetConnection">
            <summary>
            Represents a network connection.
            </summary>
        </member>
        <member name="P:Ether.Network.Common.NetConnection.Id">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Common.NetConnection.Socket">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Common.NetConnection.#ctor">
            <summary>
            Creates a new <see cref="T:Ether.Network.Common.NetConnection"/> instance.
            </summary>
        </member>
        <member name="M:Ether.Network.Common.NetConnection.Finalize">
            <summary>
            Disposes the current <see cref="T:Ether.Network.Common.NetConnection"/> resources.
            </summary>
        </member>
        <member name="M:Ether.Network.Common.NetConnection.Dispose">
            <summary>
            Disposes the current <see cref="T:Ether.Network.Common.NetConnection"/> resources.
            </summary>
        </member>
        <member name="M:Ether.Network.Common.NetConnection.Dispose(System.Boolean)">
            <summary>
            Disposes the current <see cref="T:Ether.Network.Common.NetConnection"/> resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Ether.Network.Common.NetUser">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Common.NetUser.Server">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Common.NetUser.Token">
            <summary>
            Gets the user token.
            </summary>
        </member>
        <member name="P:Ether.Network.Common.NetUser.SendAction">
            <summary>
            Gets or sets the send packet action.
            </summary>
        </member>
        <member name="M:Ether.Network.Common.NetUser.#ctor">
            <summary>
            Creates a new <see cref="T:Ether.Network.Common.NetUser"/> instance.
            </summary>
        </member>
        <member name="M:Ether.Network.Common.NetUser.HandleMessage(Ether.Network.Packets.INetPacketStream)">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Common.NetUser.Send(Ether.Network.Packets.INetPacketStream)">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Common.NetUser.SendTo(System.Collections.Generic.IEnumerable{Ether.Network.Common.INetUser},Ether.Network.Packets.INetPacketStream)">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Common.NetUser.SendToAll(Ether.Network.Packets.INetPacketStream)">
            <inheritdoc />
        </member>
        <member name="T:Ether.Network.Exceptions.EtherClientNotFoundException">
            <summary>
            Represents an Ether.Network client not found exception.
            </summary>
        </member>
        <member name="M:Ether.Network.Exceptions.EtherClientNotFoundException.#ctor(System.Guid)">
            <summary>
            Creates a new <see cref="T:Ether.Network.Exceptions.EtherClientNotFoundException"/>.
            </summary>
            <param name="clientId">Client Unique Id</param>
        </member>
        <member name="M:Ether.Network.Exceptions.EtherClientNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Ether.Network.Exceptions.EtherClientNotFoundException"/>.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ether.Network.Exceptions.EtherClientNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:Ether.Network.Exceptions.EtherClientNotFoundException"/>.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Ether.Network.Exceptions.EtherConfigurationException">
            <summary>
            Represents an Ether.Network configuration exception.
            </summary>
        </member>
        <member name="M:Ether.Network.Exceptions.EtherConfigurationException.#ctor">
            <summary>
            Creates a new <see cref="T:Ether.Network.Exceptions.EtherConfigurationException"/>.
            </summary>
        </member>
        <member name="M:Ether.Network.Exceptions.EtherConfigurationException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Ether.Network.Exceptions.EtherConfigurationException"/>.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Ether.Network.Exceptions.EtherDisconnectedException">
            <summary>
            Represents an Ether.Network disconnected exception.
            </summary>
            <remarks>
            This exception is thrown when a client is disconnected from the server.
            </remarks>
        </member>
        <member name="M:Ether.Network.Exceptions.EtherDisconnectedException.#ctor">
            <summary>
            Creates a new <see cref="T:Ether.Network.Exceptions.EtherDisconnectedException"/> instance.
            </summary>
        </member>
        <member name="M:Ether.Network.Exceptions.EtherDisconnectedException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Ether.Network.Exceptions.EtherDisconnectedException"/> instance.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ether.Network.Exceptions.EtherDisconnectedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:Ether.Network.Exceptions.EtherDisconnectedException"/> instance.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Ether.Network.Exceptions.EtherException">
            <summary>
            Represents a generic Ether.Network exception.
            </summary>
        </member>
        <member name="M:Ether.Network.Exceptions.EtherException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Ether.Network.Exceptions.EtherException"/>.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ether.Network.Exceptions.EtherException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:Ether.Network.Exceptions.EtherException"/>.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Ether.Network.Exceptions.EtherPacketException">
            <summary>
            Represents an Ether.Network packet exception.
            </summary>
        </member>
        <member name="M:Ether.Network.Exceptions.EtherPacketException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Ether.Network.Exceptions.EtherPacketException"/>.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ether.Network.Exceptions.EtherPacketException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:Ether.Network.Exceptions.EtherPacketException"/> with an inner exception.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Ether.Network.Extensions.BlockingCollectionExtensions">
            <summary>
            Contains extensions for <see cref="T:System.Collections.Concurrent.BlockingCollection`1"/> objects.
            </summary>
        </member>
        <member name="M:Ether.Network.Extensions.BlockingCollectionExtensions.Clear``1(System.Collections.Concurrent.BlockingCollection{``0})">
            <summary>
            Clears a <see cref="T:System.Collections.Concurrent.BlockingCollection`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="blockingCollection"></param>
        </member>
        <member name="T:Ether.Network.Packets.INetPacketStream">
            <summary>
            Ether.Network Packet stream interface.
            </summary>
        </member>
        <member name="P:Ether.Network.Packets.INetPacketStream.Size">
            <summary>
            Gets the size of the packet.
            </summary>
        </member>
        <member name="P:Ether.Network.Packets.INetPacketStream.Position">
            <summary>
            Gets the current position of the cursor in the packet stream.
            </summary>
        </member>
        <member name="P:Ether.Network.Packets.INetPacketStream.Buffer">
            <summary>
            Gets the packet buffer.
            </summary>
        </member>
        <member name="M:Ether.Network.Packets.INetPacketStream.Read``1">
            <summary>
            Reads a T value from the packet.
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <returns>The value read and converted to the type.</returns>
        </member>
        <member name="M:Ether.Network.Packets.INetPacketStream.ReadArray``1(System.Int32)">
            <summary>
            Reads an array of T value from the packet.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="amount">Amount to read.</param>
            <returns>An array of type T.</returns>
        </member>
        <member name="M:Ether.Network.Packets.INetPacketStream.Write``1(``0)">
            <summary>
            Writes a T value in the packet.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">Value to write in the packet stream.</param>
        </member>
        <member name="T:Ether.Network.Packets.IPacketProcessor">
            <summary>
            Defines the behavior of a <see cref="T:Ether.Network.Packets.IPacketProcessor"/>.
            </summary>
        </member>
        <member name="P:Ether.Network.Packets.IPacketProcessor.HeaderSize">
            <summary>
            Gets the packet header size.
            </summary>
        </member>
        <member name="P:Ether.Network.Packets.IPacketProcessor.IncludeHeader">
            <summary>
            Gets a value indicating whether to put the packet header in front of the packet <see cref="P:Ether.Network.Packets.INetPacketStream.Buffer"/>.
            </summary>
        </member>
        <member name="M:Ether.Network.Packets.IPacketProcessor.GetMessageLength(System.Byte[])">
            <summary>
            Gets the packet message length.
            </summary>
            <param name="buffer">Header buffer</param>
            <returns>Packet message data length</returns>
        </member>
        <member name="M:Ether.Network.Packets.IPacketProcessor.CreatePacket(System.Byte[])">
            <summary>
            Creates a new <see cref="T:Ether.Network.Packets.INetPacketStream"/> packet instance.
            </summary>
            <param name="buffer">Input buffer</param>
            <returns>New packet</returns>
        </member>
        <member name="T:Ether.Network.Packets.NetPacket">
            <summary>
            Represents a Ehter.Network built-in packet.
            </summary>
        </member>
        <member name="P:Ether.Network.Packets.NetPacket.Buffer">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Packets.NetPacket.#ctor">
            <summary>
            Creates a new <see cref="T:Ether.Network.Packets.NetPacket"/> in write-only mode.
            </summary>
        </member>
        <member name="M:Ether.Network.Packets.NetPacket.#ctor(System.Byte[])">
            <summary>
            Creates a new <see cref="T:Ether.Network.Packets.NetPacket"/> in read-only mode.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Ether.Network.Packets.NetPacket.BuildBuffer">
            <summary>
            Builds the final buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Ether.Network.Packets.NetPacketMethods.ReadMethods">
            <summary>
            Read methods dictionary.
            </summary>
        </member>
        <member name="F:Ether.Network.Packets.NetPacketMethods.WriteMethods">
            <summary>
            Write methods dictionary.
            </summary>
        </member>
        <member name="P:Ether.Network.Packets.NetPacketProcessor.HeaderSize">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Packets.NetPacketProcessor.IncludeHeader">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Packets.NetPacketProcessor.GetMessageLength(System.Byte[])">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Packets.NetPacketProcessor.CreatePacket(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:Ether.Network.Packets.NetPacketStream">
            <summary>
            Creates a Ether.Network packet steram.
            </summary>
        </member>
        <member name="P:Ether.Network.Packets.NetPacketStream.Size">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Packets.NetPacketStream.Buffer">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Packets.NetPacketStream.Position">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Packets.NetPacketStream.#ctor">
            <summary>
            Creates and initializes a new <see cref="T:Ether.Network.Packets.NetPacketStream"/> instance in write-only mode.
            </summary>
        </member>
        <member name="M:Ether.Network.Packets.NetPacketStream.#ctor(System.Byte[])">
            <summary>
            Creates and initializes a new <see cref="T:Ether.Network.Packets.NetPacketStream"/> instance in read-only mode.
            </summary>
            <param name="buffer">Input buffer</param>
        </member>
        <member name="M:Ether.Network.Packets.NetPacketStream.Read``1">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Packets.NetPacketStream.ReadArray``1(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Packets.NetPacketStream.Write``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Packets.NetPacketStream.GetInternalBuffer">
            <summary>
            Get stream buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ether.Network.Server.INetServer">
            <summary>
            Provides a simple and scalable TCP server.
            </summary>
        </member>
        <member name="P:Ether.Network.Server.INetServer.IsRunning">
            <summary>
            Gets the <see cref="T:Ether.Network.Server.INetServer"/> running state.
            </summary>
        </member>
        <member name="M:Ether.Network.Server.INetServer.Start">
            <summary>
            Start the server.
            </summary>
        </member>
        <member name="M:Ether.Network.Server.INetServer.Stop">
            <summary>
            Stop the server.
            </summary>
        </member>
        <member name="M:Ether.Network.Server.INetServer.DisconnectClient(System.Guid)">
            <summary>
            Disconnects a client from the server.
            </summary>
            <param name="clientId">Client unique id</param>
        </member>
        <member name="M:Ether.Network.Server.INetServer.SendTo(System.Collections.Generic.IEnumerable{Ether.Network.Common.INetUser},Ether.Network.Packets.INetPacketStream)">
            <summary>
            Sends a packet to a list of connected users.
            </summary>
            <param name="users">List of users.</param>
            <param name="packet">Packet to send.</param>
        </member>
        <member name="M:Ether.Network.Server.INetServer.SendToAll(Ether.Network.Packets.INetPacketStream)">
            <summary>
            Sends a packet to every connected user.
            </summary>
            <param name="packet">Packet to send.</param>
        </member>
        <member name="M:Ether.Network.Server.INetServer.GetUser(System.Guid)">
            <summary>
            Gets the user by his Id.
            </summary>
            <param name="id">User Id</param>
            <returns>User</returns>
        </member>
        <member name="T:Ether.Network.Server.NetServer`1">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Server.NetServer`1.Configuration">
            <summary>
            Gets the <see cref="T:Ether.Network.Server.NetServer`1"/> configuration
            </summary>
        </member>
        <member name="P:Ether.Network.Server.NetServer`1.PacketProcessor">
            <summary>
            Gets the packet processor.
            </summary>
        </member>
        <member name="P:Ether.Network.Server.NetServer`1.IsRunning">
            <inheritdoc />
        </member>
        <member name="P:Ether.Network.Server.NetServer`1.Clients">
            <summary>
            Gets the connected client.
            </summary>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.#ctor">
            <summary>
            Creates a new <see cref="T:Ether.Network.Server.NetServer`1"/> instance.
            </summary>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.Start">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.Stop">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.DisconnectClient(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.SendTo(System.Collections.Generic.IEnumerable{Ether.Network.Common.INetUser},Ether.Network.Packets.INetPacketStream)">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.SendToAll(Ether.Network.Packets.INetPacketStream)">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.GetUser(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.Initialize">
            <summary>
            Initialize the server resourrces.
            </summary>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.OnClientConnected(`0)">
            <summary>
            Triggered when a new client is connected to the server.
            </summary>
            <param name="connection">Connected client</param>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.OnClientDisconnected(`0)">
            <summary>
            Triggered when a client disconnects from the server.
            </summary>
            <param name="connection">Disconnected client</param>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.OnError(System.Exception)">
            <summary>
            Triggered when an error occurs on the server.
            </summary>
            <param name="exception">Exception</param>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.StartAccept(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Starts the accept connection async operation.
            </summary>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.ProcessAccept(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Process the accept connection async operation.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Process the send async operation.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.SendMessageAction(Ether.Network.Common.INetUser,System.Byte[])">
            <summary>
            Adds the message to the sending queue.
            </summary>
            <param name="user">User that sent the message</param>
            <param name="message">Message</param>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.ProcessSendQueue">
            <summary>
            Process the send queue.
            </summary>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.SendMessage(Ether.Network.Common.Data.MessageData)">
            <summary>
            Sends the message through the network.
            </summary>
            <param name="messageData"></param>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Process receieve.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.CloseConnection(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Close the connection.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.HandleIncomingMessages(`0,System.Byte[])">
            <summary>
            Handle incoming message packets.
            </summary>
            <param name="user">Current user</param>
            <param name="messageData">Incoming message data</param>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.ClearResources">
            <summary>
            Clear NetServer's resources.
            </summary>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.CheckConfiguration">
            <summary>
            Checks the configuration.
            </summary>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.IO_Completed(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Triggered when a <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> async operation is completed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ether.Network.Server.NetServer`1.Dispose(System.Boolean)">
            <summary>
            Dispose the <see cref="T:Ether.Network.Server.NetServer`1"/> resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Ether.Network.Server.NetServerConfiguration">
            <summary>
            Provide properties to configure a <see cref="T:Ether.Network.Server.NetServer`1"/>.
            </summary>
        </member>
        <member name="P:Ether.Network.Server.NetServerConfiguration.Blocking">
            <summary>
            Gets or sets the blocking state of the server.
            </summary>
        </member>
        <member name="P:Ether.Network.Server.NetServerConfiguration.Port">
            <summary>
            Gets or sets the port.
            </summary>
        </member>
        <member name="P:Ether.Network.Server.NetServerConfiguration.Host">
            <summary>
            Gets or sets the host address.
            </summary>
        </member>
        <member name="P:Ether.Network.Server.NetServerConfiguration.Backlog">
            <summary>
            Gets or sets the listening backlog.
            </summary>
        </member>
        <member name="P:Ether.Network.Server.NetServerConfiguration.MaximumNumberOfConnections">
            <summary>
            Gets or sets the maximum number of simultaneous connections on the server.
            </summary>
        </member>
        <member name="P:Ether.Network.Server.NetServerConfiguration.BufferSize">
            <summary>
            Gets or sets the buffer size.
            </summary>
        </member>
        <member name="P:Ether.Network.Server.NetServerConfiguration.Address">
            <summary>
            Gets the listening address.
            </summary>
        </member>
        <member name="M:Ether.Network.Server.NetServerConfiguration.#ctor(Ether.Network.Server.INetServer)">
            <summary>
            Creates a new <see cref="T:Ether.Network.Server.NetServerConfiguration"/>.
            </summary>
            <param name="server">Server reference</param>
        </member>
        <member name="M:Ether.Network.Server.NetServerConfiguration.SetValue``1(``0@,``0)">
            <summary>
            Set the value of a property passed as reference.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="container"></param>
            <param name="value"></param>
        </member>
        <member name="T:Ether.Network.Utils.NetUtils">
            <summary>
            Provides utility methods.
            </summary>
        </member>
        <member name="M:Ether.Network.Utils.NetUtils.GetIpAddress(System.String)">
            <summary>
            Gets an <see cref="T:System.Net.IPAddress"/> from an IP or a host string.
            </summary>
            <param name="ipOrHost">IP or Host address.</param>
            <returns>Parsed <see cref="T:System.Net.IPAddress"/>.</returns>
        </member>
        <member name="M:Ether.Network.Utils.NetUtils.CreateIpEndPoint(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Net.IPEndPoint"/> with an IP or host and a port number.
            </summary>
            <param name="ipOrHost">IP or Host address.</param>
            <param name="port">Port number.</param>
            <returns></returns>
        </member>
        <member name="M:Ether.Network.Utils.NetUtils.GetPacketBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the buffer at the offset and size passed.
            </summary>
            <param name="bufferSource">Input buffer source</param>
            <param name="offset">Data offset</param>
            <param name="size">Data size</param>
            <returns></returns>
        </member>
        <member name="M:Ether.Network.Utils.NetUtils.CreateSocketAsync(System.Object,System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs})">
            <summary>
            Creates a new <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instance.
            </summary>
            <param name="userToken">User token</param>
            <param name="completedAction">Completed operation action</param>
            <returns></returns>
        </member>
        <member name="M:Ether.Network.Utils.NetUtils.CreateSocketAsync(System.Object,System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs},System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instance.
            </summary>
            <param name="userToken">User token</param>
            <param name="completedAction">Completed operation action</param>
            <param name="bufferSize">Buffer size</param>
            <returns></returns>
        </member>
        <member name="T:Ether.Network.Utils.SocketAsyncEventArgsPool">
            <summary>
            Represents an object pool of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> elements.
            </summary>
        </member>
        <member name="M:Ether.Network.Utils.SocketAsyncEventArgsPool.#ctor">
            <summary>
            Creates a new <see cref="T:Ether.Network.Utils.SocketAsyncEventArgsPool"/> instance with a maximal capacity.
            </summary>
        </member>
        <member name="M:Ether.Network.Utils.SocketAsyncEventArgsPool.Finalize">
            <summary>
            Destructs the <see cref="T:Ether.Network.Utils.SocketAsyncEventArgsPool"/> instance.
            </summary>
        </member>
        <member name="M:Ether.Network.Utils.SocketAsyncEventArgsPool.Pop">
            <summary>
            Pops a <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> of the top of the stack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ether.Network.Utils.SocketAsyncEventArgsPool.Push(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Push a <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> to the top of the stack.
            </summary>
            <param name="socketAsyncEventArgs"></param>
        </member>
        <member name="M:Ether.Network.Utils.SocketAsyncEventArgsPool.Clear">
            <summary>
            Clear the pool.
            </summary>
        </member>
        <member name="M:Ether.Network.Utils.SocketAsyncEventArgsPool.Dispose(System.Boolean)">
            <summary>
            Disposes resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Ether.Network.Utils.SocketAsyncEventArgsPool.Dispose">
            <summary>
            Dispose the <see cref="T:Ether.Network.Utils.SocketAsyncEventArgsPool"/> resources.
            </summary>
        </member>
    </members>
</doc>
