// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

namespace OxidePack.Data
{
    public partial class UserData
    {
        #region [Methods] Pooled
        private bool _disposed;
        public bool ShouldPool = true;

        public virtual void Dispose()
        {
            if (this._disposed)
                return;
            this.ResetToPool();
            this._disposed = true;
        }

        public void ResetToPool()
        {
            ResetToPool(this);
        }

        public static void ResetToPool(UserData instance)
        {
            if (!instance.ShouldPool)
                return;
            // [string] key
            instance.key = default(string);

            // [uint] index
            instance.index = default(uint);

            // [string] username
            instance.username = default(string);

            // [ulong] registred
            instance.registred = default(ulong);

            // [Permission] permissions
            if (instance.permissions != null)
            {
                for (int i = 0; i < instance.permissions.Count; i++)
                {
                    if (instance.permissions[i] != null)
                    {
                        instance.permissions[i].ResetToPool();
                        instance.permissions[i] = null;
                    }
                }
                List<OxidePack.Data.Permission> inspermissions = instance.permissions;
                Pool.FreeList<OxidePack.Data.Permission>(ref inspermissions);
                instance.permissions = inspermissions;
            }

            // [ulong] millisecondsused
            instance.millisecondsused = default(ulong);

            Pool.Free<OxidePack.Data.UserData>(ref instance);
        }

        public virtual void EnterPool()
        {
            this._disposed = true;
        }

        public virtual void LeavePool()
        {
            this._disposed = false;
        }

        #endregion
        #region [Methods] Reader
        public void ReadFromStream(Stream stream, int size)
        {
            DeserializeLength(stream, size, this);
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static UserData Deserialize(Stream stream)
        {
            UserData instance = Pool.Get<UserData>();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static UserData DeserializeLengthDelimited(Stream stream)
        {
            UserData instance = Pool.Get<UserData>();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static UserData DeserializeLength(Stream stream, int length)
        {
            UserData instance = Pool.Get<UserData>();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static UserData Deserialize(byte[] buffer)
        {
            UserData instance = Pool.Get<UserData>();
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static OxidePack.Data.UserData Deserialize(byte[] buffer, OxidePack.Data.UserData instance)
        {
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.UserData Deserialize(Stream stream, OxidePack.Data.UserData instance)
        {
            if (instance.permissions == null)
                instance.permissions = Pool.GetList<OxidePack.Data.Permission>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.index = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.registred = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        instance.permissions.Add(OxidePack.Data.Permission.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.millisecondsused = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.UserData DeserializeLengthDelimited(Stream stream, OxidePack.Data.UserData instance)
        {
            if (instance.permissions == null)
                instance.permissions = Pool.GetList<OxidePack.Data.Permission>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.index = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.registred = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        instance.permissions.Add(OxidePack.Data.Permission.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.millisecondsused = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.UserData DeserializeLength(Stream stream, int length, OxidePack.Data.UserData instance)
        {
            if (instance.permissions == null)
                instance.permissions = Pool.GetList<OxidePack.Data.Permission>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.index = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.registred = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        instance.permissions.Add(OxidePack.Data.Permission.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.millisecondsused = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        #endregion
        #region [Methods] Writer
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, UserData instance)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.key == null)
                throw new ArgumentNullException("key", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.key));
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.index);
            if (instance.username == null)
                throw new ArgumentNullException("username", "Required by proto specification.");
            // Key for field: 3, LengthDelimited
            stream.WriteByte(26);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.username));
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.registred);
            if (instance.permissions != null)
            {
                foreach (var i5 in instance.permissions)
                {
                    // Key for field: 5, LengthDelimited
                    stream.WriteByte(42);
                    ﻿msField.SetLength(0);
                    OxidePack.Data.Permission.Serialize(msField, i5);
                    // Length delimited byte array
                    uint length5 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length5);
                    stream.Write(msField.GetBuffer(), 0, (int)length5);

                }
            }
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.millisecondsused);
            Pool.FreeMemoryStream(ref msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(UserData instance)
        {
            var ms = Pool.Get<MemoryStream>();
            Serialize(ms, instance);
            var arr = ms.ToArray();
            Pool.FreeMemoryStream(ref ms);
            return arr;
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, UserData instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public static void SerializeDelta(Stream stream, UserData instance, UserData previous)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.key != previous.key)
            {
                if (instance.key == null)
                    throw new ArgumentNullException("key", "Required by proto specification.");
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.key));
            }
            if (instance.index != previous.index)
            {
                // Key for field: 2, Varint
                stream.WriteByte(16);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.index);
            }
            if (instance.username != previous.username)
            {
                if (instance.username == null)
                    throw new ArgumentNullException("username", "Required by proto specification.");
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.username));
            }
            if (instance.registred != previous.registred)
            {
                // Key for field: 4, Varint
                stream.WriteByte(32);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.registred);
            }
            if (instance.permissions != previous.permissions)
            {
                if (instance.permissions != null)
                {
                    foreach (var i5 in instance.permissions)
                    {
                        // Key for field: 5, LengthDelimited
                        stream.WriteByte(42);
                        ﻿msField.SetLength(0);
                        OxidePack.Data.Permission.Serialize(msField, i5);
                        // Length delimited byte array
                        uint length5 = (uint)msField.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length5);
                        stream.Write(msField.GetBuffer(), 0, (int)length5);

                    }
                }
            }
            if (instance.millisecondsused != previous.millisecondsused)
            {
                // Key for field: 6, Varint
                stream.WriteByte(48);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.millisecondsused);
            }
            Pool.FreeMemoryStream(ref msField);
        }
        public void WriteToStream(Stream stream)
        {
            Serialize(stream, this);
        }
        public void WriteToStreamDelta(Stream stream, UserData previous)
        {
            if (previous != null)
            {
                SerializeDelta(stream, this, previous);
            }
            else
            {
                Serialize(stream, this);
            }
        }
        #endregion
    }

    public partial class Permission
    {
        #region [Methods] Pooled
        private bool _disposed;
        public bool ShouldPool = true;

        public virtual void Dispose()
        {
            if (this._disposed)
                return;
            this.ResetToPool();
            this._disposed = true;
        }

        public void ResetToPool()
        {
            ResetToPool(this);
        }

        public static void ResetToPool(Permission instance)
        {
            if (!instance.ShouldPool)
                return;
            // [string] name
            instance.name = default(string);

            // [ulong] expired
            instance.expired = default(ulong);

            Pool.Free<OxidePack.Data.Permission>(ref instance);
        }

        public virtual void EnterPool()
        {
            this._disposed = true;
        }

        public virtual void LeavePool()
        {
            this._disposed = false;
        }

        #endregion
        #region [Methods] Reader
        public void ReadFromStream(Stream stream, int size)
        {
            DeserializeLength(stream, size, this);
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Permission Deserialize(Stream stream)
        {
            Permission instance = Pool.Get<Permission>();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Permission DeserializeLengthDelimited(Stream stream)
        {
            Permission instance = Pool.Get<Permission>();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Permission DeserializeLength(Stream stream, int length)
        {
            Permission instance = Pool.Get<Permission>();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Permission Deserialize(byte[] buffer)
        {
            Permission instance = Pool.Get<Permission>();
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static OxidePack.Data.Permission Deserialize(byte[] buffer, OxidePack.Data.Permission instance)
        {
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.Permission Deserialize(Stream stream, OxidePack.Data.Permission instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.expired = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.Permission DeserializeLengthDelimited(Stream stream, OxidePack.Data.Permission instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.expired = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.Permission DeserializeLength(Stream stream, int length, OxidePack.Data.Permission instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.expired = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        #endregion
        #region [Methods] Writer
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Permission instance)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.name == null)
                throw new ArgumentNullException("name", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.name));
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.expired);
            Pool.FreeMemoryStream(ref msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Permission instance)
        {
            var ms = Pool.Get<MemoryStream>();
            Serialize(ms, instance);
            var arr = ms.ToArray();
            Pool.FreeMemoryStream(ref ms);
            return arr;
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, Permission instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public static void SerializeDelta(Stream stream, Permission instance, Permission previous)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.name != previous.name)
            {
                if (instance.name == null)
                    throw new ArgumentNullException("name", "Required by proto specification.");
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.name));
            }
            if (instance.expired != previous.expired)
            {
                // Key for field: 2, Varint
                stream.WriteByte(16);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.expired);
            }
            Pool.FreeMemoryStream(ref msField);
        }
        public void WriteToStream(Stream stream)
        {
            Serialize(stream, this);
        }
        public void WriteToStreamDelta(Stream stream, Permission previous)
        {
            if (previous != null)
            {
                SerializeDelta(stream, this, previous);
            }
            else
            {
                Serialize(stream, this);
            }
        }
        #endregion
    }

    public partial class UserDataCollection
    {
        #region [Methods] Pooled
        private bool _disposed;
        public bool ShouldPool = true;

        public virtual void Dispose()
        {
            if (this._disposed)
                return;
            this.ResetToPool();
            this._disposed = true;
        }

        public void ResetToPool()
        {
            ResetToPool(this);
        }

        public static void ResetToPool(UserDataCollection instance)
        {
            if (!instance.ShouldPool)
                return;
            // [UserData] users
            if (instance.users != null)
            {
                for (int i = 0; i < instance.users.Count; i++)
                {
                    if (instance.users[i] != null)
                    {
                        instance.users[i].ResetToPool();
                        instance.users[i] = null;
                    }
                }
                List<OxidePack.Data.UserData> insusers = instance.users;
                Pool.FreeList<OxidePack.Data.UserData>(ref insusers);
                instance.users = insusers;
            }

            Pool.Free<OxidePack.Data.UserDataCollection>(ref instance);
        }

        public virtual void EnterPool()
        {
            this._disposed = true;
        }

        public virtual void LeavePool()
        {
            this._disposed = false;
        }

        #endregion
        #region [Methods] Reader
        public void ReadFromStream(Stream stream, int size)
        {
            DeserializeLength(stream, size, this);
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static UserDataCollection Deserialize(Stream stream)
        {
            UserDataCollection instance = Pool.Get<UserDataCollection>();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static UserDataCollection DeserializeLengthDelimited(Stream stream)
        {
            UserDataCollection instance = Pool.Get<UserDataCollection>();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static UserDataCollection DeserializeLength(Stream stream, int length)
        {
            UserDataCollection instance = Pool.Get<UserDataCollection>();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static UserDataCollection Deserialize(byte[] buffer)
        {
            UserDataCollection instance = Pool.Get<UserDataCollection>();
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static OxidePack.Data.UserDataCollection Deserialize(byte[] buffer, OxidePack.Data.UserDataCollection instance)
        {
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.UserDataCollection Deserialize(Stream stream, OxidePack.Data.UserDataCollection instance)
        {
            if (instance.users == null)
                instance.users = Pool.GetList<OxidePack.Data.UserData>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.users.Add(OxidePack.Data.UserData.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.UserDataCollection DeserializeLengthDelimited(Stream stream, OxidePack.Data.UserDataCollection instance)
        {
            if (instance.users == null)
                instance.users = Pool.GetList<OxidePack.Data.UserData>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.users.Add(OxidePack.Data.UserData.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.UserDataCollection DeserializeLength(Stream stream, int length, OxidePack.Data.UserDataCollection instance)
        {
            if (instance.users == null)
                instance.users = Pool.GetList<OxidePack.Data.UserData>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.users.Add(OxidePack.Data.UserData.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        #endregion
        #region [Methods] Writer
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, UserDataCollection instance)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.users != null)
            {
                foreach (var i1 in instance.users)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    OxidePack.Data.UserData.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    stream.Write(msField.GetBuffer(), 0, (int)length1);

                }
            }
            Pool.FreeMemoryStream(ref msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(UserDataCollection instance)
        {
            var ms = Pool.Get<MemoryStream>();
            Serialize(ms, instance);
            var arr = ms.ToArray();
            Pool.FreeMemoryStream(ref ms);
            return arr;
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, UserDataCollection instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public static void SerializeDelta(Stream stream, UserDataCollection instance, UserDataCollection previous)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.users != previous.users)
            {
                if (instance.users != null)
                {
                    foreach (var i1 in instance.users)
                    {
                        // Key for field: 1, LengthDelimited
                        stream.WriteByte(10);
                        ﻿msField.SetLength(0);
                        OxidePack.Data.UserData.Serialize(msField, i1);
                        // Length delimited byte array
                        uint length1 = (uint)msField.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                        stream.Write(msField.GetBuffer(), 0, (int)length1);

                    }
                }
            }
            Pool.FreeMemoryStream(ref msField);
        }
        public void WriteToStream(Stream stream)
        {
            Serialize(stream, this);
        }
        public void WriteToStreamDelta(Stream stream, UserDataCollection previous)
        {
            if (previous != null)
            {
                SerializeDelta(stream, this, previous);
            }
            else
            {
                Serialize(stream, this);
            }
        }
        #endregion
    }

}
