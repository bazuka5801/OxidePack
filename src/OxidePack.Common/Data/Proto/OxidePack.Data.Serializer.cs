// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

namespace OxidePack.Data
{
    public partial class UserInformation
    {
        #region [Methods] Pooled
        private bool _disposed;
        public bool ShouldPool = true;

        public virtual void Dispose()
        {
            if (this._disposed)
                return;
            this.ResetToPool();
            this._disposed = true;
        }

        public void ResetToPool()
        {
            ResetToPool(this);
        }

        public static void ResetToPool(UserInformation instance)
        {
            if (!instance.ShouldPool)
                return;
            // [string] key
            instance.key = default(string);

            // [string] username
            instance.username = default(string);

            // [string] version
            instance.version = default(string);

            Pool.Free<OxidePack.Data.UserInformation>(ref instance);
        }

        public virtual void EnterPool()
        {
            this._disposed = true;
        }

        public virtual void LeavePool()
        {
            this._disposed = false;
        }

        #endregion
        #region [Methods] Reader
        public void ReadFromStream(Stream stream, int size)
        {
            DeserializeLength(stream, size, this);
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static UserInformation Deserialize(Stream stream)
        {
            UserInformation instance = Pool.Get<UserInformation>();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static UserInformation DeserializeLengthDelimited(Stream stream)
        {
            UserInformation instance = Pool.Get<UserInformation>();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static UserInformation DeserializeLength(Stream stream, int length)
        {
            UserInformation instance = Pool.Get<UserInformation>();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static UserInformation Deserialize(byte[] buffer)
        {
            UserInformation instance = Pool.Get<UserInformation>();
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static OxidePack.Data.UserInformation Deserialize(byte[] buffer, OxidePack.Data.UserInformation instance)
        {
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.UserInformation Deserialize(Stream stream, OxidePack.Data.UserInformation instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.version = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.UserInformation DeserializeLengthDelimited(Stream stream, OxidePack.Data.UserInformation instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.version = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.UserInformation DeserializeLength(Stream stream, int length, OxidePack.Data.UserInformation instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.version = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        #endregion
        #region [Methods] Writer
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, UserInformation instance)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.key == null)
                throw new ArgumentNullException("key", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.key));
            if (instance.username == null)
                throw new ArgumentNullException("username", "Required by proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.username));
            if (instance.version == null)
                throw new ArgumentNullException("version", "Required by proto specification.");
            // Key for field: 3, LengthDelimited
            stream.WriteByte(26);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.version));
            Pool.FreeMemoryStream(ref msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(UserInformation instance)
        {
            var ms = Pool.Get<MemoryStream>();
            Serialize(ms, instance);
            var arr = ms.ToArray();
            Pool.FreeMemoryStream(ref ms);
            return arr;
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, UserInformation instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public static void SerializeDelta(Stream stream, UserInformation instance, UserInformation previous)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.key != previous.key)
            {
                if (instance.key == null)
                    throw new ArgumentNullException("key", "Required by proto specification.");
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.key));
            }
            if (instance.username != previous.username)
            {
                if (instance.username == null)
                    throw new ArgumentNullException("username", "Required by proto specification.");
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.username));
            }
            if (instance.version != previous.version)
            {
                if (instance.version == null)
                    throw new ArgumentNullException("version", "Required by proto specification.");
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.version));
            }
            Pool.FreeMemoryStream(ref msField);
        }
        public void WriteToStream(Stream stream)
        {
            Serialize(stream, this);
        }
        public void WriteToStreamDelta(Stream stream, UserInformation previous)
        {
            if (previous != null)
            {
                SerializeDelta(stream, this, previous);
            }
            else
            {
                Serialize(stream, this);
            }
        }
        #endregion
    }

    public partial class GeneratedFileRequest
    {
        #region [Methods] Pooled
        private bool _disposed;
        public bool ShouldPool = true;

        public virtual void Dispose()
        {
            if (this._disposed)
                return;
            this.ResetToPool();
            this._disposed = true;
        }

        public void ResetToPool()
        {
            ResetToPool(this);
        }

        public static void ResetToPool(GeneratedFileRequest instance)
        {
            if (!instance.ShouldPool)
                return;
            // [string] pluginname
            instance.pluginname = default(string);

            // [string] @namespace
            instance.@namespace = default(string);

            // [string] modules
            if (instance.modules != null)
            {
                List<string> insmodules = instance.modules;
                Pool.FreeList<string>(ref insmodules);
                instance.modules = insmodules;
            }

            Pool.Free<OxidePack.Data.GeneratedFileRequest>(ref instance);
        }

        public virtual void EnterPool()
        {
            this._disposed = true;
        }

        public virtual void LeavePool()
        {
            this._disposed = false;
        }

        #endregion
        #region [Methods] Reader
        public void ReadFromStream(Stream stream, int size)
        {
            DeserializeLength(stream, size, this);
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GeneratedFileRequest Deserialize(Stream stream)
        {
            GeneratedFileRequest instance = Pool.Get<GeneratedFileRequest>();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GeneratedFileRequest DeserializeLengthDelimited(Stream stream)
        {
            GeneratedFileRequest instance = Pool.Get<GeneratedFileRequest>();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GeneratedFileRequest DeserializeLength(Stream stream, int length)
        {
            GeneratedFileRequest instance = Pool.Get<GeneratedFileRequest>();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static GeneratedFileRequest Deserialize(byte[] buffer)
        {
            GeneratedFileRequest instance = Pool.Get<GeneratedFileRequest>();
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static OxidePack.Data.GeneratedFileRequest Deserialize(byte[] buffer, OxidePack.Data.GeneratedFileRequest instance)
        {
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.GeneratedFileRequest Deserialize(Stream stream, OxidePack.Data.GeneratedFileRequest instance)
        {
            if (instance.modules == null)
                instance.modules = Pool.GetList<string>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.pluginname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.@namespace = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.modules.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.GeneratedFileRequest DeserializeLengthDelimited(Stream stream, OxidePack.Data.GeneratedFileRequest instance)
        {
            if (instance.modules == null)
                instance.modules = Pool.GetList<string>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.pluginname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.@namespace = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.modules.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.GeneratedFileRequest DeserializeLength(Stream stream, int length, OxidePack.Data.GeneratedFileRequest instance)
        {
            if (instance.modules == null)
                instance.modules = Pool.GetList<string>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.pluginname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.@namespace = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.modules.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        #endregion
        #region [Methods] Writer
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, GeneratedFileRequest instance)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.pluginname == null)
                throw new ArgumentNullException("pluginname", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.pluginname));
            if (instance.@namespace == null)
                throw new ArgumentNullException("@namespace", "Required by proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.@namespace));
            if (instance.modules != null)
            {
                foreach (var i3 in instance.modules)
                {
                    // Key for field: 3, LengthDelimited
                    stream.WriteByte(26);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(i3));
                }
            }
            Pool.FreeMemoryStream(ref msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(GeneratedFileRequest instance)
        {
            var ms = Pool.Get<MemoryStream>();
            Serialize(ms, instance);
            var arr = ms.ToArray();
            Pool.FreeMemoryStream(ref ms);
            return arr;
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, GeneratedFileRequest instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public static void SerializeDelta(Stream stream, GeneratedFileRequest instance, GeneratedFileRequest previous)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.pluginname != previous.pluginname)
            {
                if (instance.pluginname == null)
                    throw new ArgumentNullException("pluginname", "Required by proto specification.");
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.pluginname));
            }
            if (instance.@namespace != previous.@namespace)
            {
                if (instance.@namespace == null)
                    throw new ArgumentNullException("@namespace", "Required by proto specification.");
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.@namespace));
            }
            if (instance.modules != previous.modules)
            {
                if (instance.modules != null)
                {
                    foreach (var i3 in instance.modules)
                    {
                        // Key for field: 3, LengthDelimited
                        stream.WriteByte(26);
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(i3));
                    }
                }
            }
            Pool.FreeMemoryStream(ref msField);
        }
        public void WriteToStream(Stream stream)
        {
            Serialize(stream, this);
        }
        public void WriteToStreamDelta(Stream stream, GeneratedFileRequest previous)
        {
            if (previous != null)
            {
                SerializeDelta(stream, this, previous);
            }
            else
            {
                Serialize(stream, this);
            }
        }
        #endregion
    }

    public partial class GeneratedFileResponse
    {
        #region [Methods] Pooled
        private bool _disposed;
        public bool ShouldPool = true;

        public virtual void Dispose()
        {
            if (this._disposed)
                return;
            this.ResetToPool();
            this._disposed = true;
        }

        public void ResetToPool()
        {
            ResetToPool(this);
        }

        public static void ResetToPool(GeneratedFileResponse instance)
        {
            if (!instance.ShouldPool)
                return;
            // [string] pluginname
            instance.pluginname = default(string);

            // [string] content
            instance.content = default(string);

            Pool.Free<OxidePack.Data.GeneratedFileResponse>(ref instance);
        }

        public virtual void EnterPool()
        {
            this._disposed = true;
        }

        public virtual void LeavePool()
        {
            this._disposed = false;
        }

        #endregion
        #region [Methods] Reader
        public void ReadFromStream(Stream stream, int size)
        {
            DeserializeLength(stream, size, this);
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GeneratedFileResponse Deserialize(Stream stream)
        {
            GeneratedFileResponse instance = Pool.Get<GeneratedFileResponse>();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GeneratedFileResponse DeserializeLengthDelimited(Stream stream)
        {
            GeneratedFileResponse instance = Pool.Get<GeneratedFileResponse>();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GeneratedFileResponse DeserializeLength(Stream stream, int length)
        {
            GeneratedFileResponse instance = Pool.Get<GeneratedFileResponse>();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static GeneratedFileResponse Deserialize(byte[] buffer)
        {
            GeneratedFileResponse instance = Pool.Get<GeneratedFileResponse>();
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static OxidePack.Data.GeneratedFileResponse Deserialize(byte[] buffer, OxidePack.Data.GeneratedFileResponse instance)
        {
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.GeneratedFileResponse Deserialize(Stream stream, OxidePack.Data.GeneratedFileResponse instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.pluginname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.content = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.GeneratedFileResponse DeserializeLengthDelimited(Stream stream, OxidePack.Data.GeneratedFileResponse instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.pluginname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.content = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.GeneratedFileResponse DeserializeLength(Stream stream, int length, OxidePack.Data.GeneratedFileResponse instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.pluginname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.content = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        #endregion
        #region [Methods] Writer
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, GeneratedFileResponse instance)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.pluginname == null)
                throw new ArgumentNullException("pluginname", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.pluginname));
            if (instance.content == null)
                throw new ArgumentNullException("content", "Required by proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.content));
            Pool.FreeMemoryStream(ref msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(GeneratedFileResponse instance)
        {
            var ms = Pool.Get<MemoryStream>();
            Serialize(ms, instance);
            var arr = ms.ToArray();
            Pool.FreeMemoryStream(ref ms);
            return arr;
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, GeneratedFileResponse instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public static void SerializeDelta(Stream stream, GeneratedFileResponse instance, GeneratedFileResponse previous)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.pluginname != previous.pluginname)
            {
                if (instance.pluginname == null)
                    throw new ArgumentNullException("pluginname", "Required by proto specification.");
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.pluginname));
            }
            if (instance.content != previous.content)
            {
                if (instance.content == null)
                    throw new ArgumentNullException("content", "Required by proto specification.");
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.content));
            }
            Pool.FreeMemoryStream(ref msField);
        }
        public void WriteToStream(Stream stream)
        {
            Serialize(stream, this);
        }
        public void WriteToStreamDelta(Stream stream, GeneratedFileResponse previous)
        {
            if (previous != null)
            {
                SerializeDelta(stream, this, previous);
            }
            else
            {
                Serialize(stream, this);
            }
        }
        #endregion
    }

    public partial class BuildRequest
    {
        #region [Methods] Pooled
        private bool _disposed;
        public bool ShouldPool = true;

        public virtual void Dispose()
        {
            if (this._disposed)
                return;
            this.ResetToPool();
            this._disposed = true;
        }

        public void ResetToPool()
        {
            ResetToPool(this);
        }

        public static void ResetToPool(BuildRequest instance)
        {
            if (!instance.ShouldPool)
                return;
            // [BuildOptions] buildOptions
            if (instance.buildOptions != null)
            {
                instance.buildOptions.ResetToPool();
                instance.buildOptions = null;
            }

            // [EncryptOptions] encryptOptions
            if (instance.encryptOptions != null)
            {
                instance.encryptOptions.ResetToPool();
                instance.encryptOptions = null;
            }

            // [SourceFile] sources
            if (instance.sources != null)
            {
                for (int i = 0; i < instance.sources.Count; i++)
                {
                    if (instance.sources[i] != null)
                    {
                        instance.sources[i].ResetToPool();
                        instance.sources[i] = null;
                    }
                }
                List<OxidePack.Data.SourceFile> inssources = instance.sources;
                Pool.FreeList<OxidePack.Data.SourceFile>(ref inssources);
                instance.sources = inssources;
            }

            Pool.Free<OxidePack.Data.BuildRequest>(ref instance);
        }

        public virtual void EnterPool()
        {
            this._disposed = true;
        }

        public virtual void LeavePool()
        {
            this._disposed = false;
        }

        #endregion
        #region [Methods] Reader
        public void ReadFromStream(Stream stream, int size)
        {
            DeserializeLength(stream, size, this);
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BuildRequest Deserialize(Stream stream)
        {
            BuildRequest instance = Pool.Get<BuildRequest>();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BuildRequest DeserializeLengthDelimited(Stream stream)
        {
            BuildRequest instance = Pool.Get<BuildRequest>();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BuildRequest DeserializeLength(Stream stream, int length)
        {
            BuildRequest instance = Pool.Get<BuildRequest>();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static BuildRequest Deserialize(byte[] buffer)
        {
            BuildRequest instance = Pool.Get<BuildRequest>();
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static OxidePack.Data.BuildRequest Deserialize(byte[] buffer, OxidePack.Data.BuildRequest instance)
        {
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.BuildRequest Deserialize(Stream stream, OxidePack.Data.BuildRequest instance)
        {
            if (instance.sources == null)
                instance.sources = Pool.GetList<OxidePack.Data.SourceFile>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.buildOptions == null)
                            instance.buildOptions = OxidePack.Data.BuildOptions.DeserializeLengthDelimited(stream);
                        else
                            OxidePack.Data.BuildOptions.DeserializeLengthDelimited(stream, instance.buildOptions);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.encryptOptions == null)
                            instance.encryptOptions = OxidePack.Data.EncryptOptions.DeserializeLengthDelimited(stream);
                        else
                            OxidePack.Data.EncryptOptions.DeserializeLengthDelimited(stream, instance.encryptOptions);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.sources.Add(OxidePack.Data.SourceFile.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.BuildRequest DeserializeLengthDelimited(Stream stream, OxidePack.Data.BuildRequest instance)
        {
            if (instance.sources == null)
                instance.sources = Pool.GetList<OxidePack.Data.SourceFile>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.buildOptions == null)
                            instance.buildOptions = OxidePack.Data.BuildOptions.DeserializeLengthDelimited(stream);
                        else
                            OxidePack.Data.BuildOptions.DeserializeLengthDelimited(stream, instance.buildOptions);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.encryptOptions == null)
                            instance.encryptOptions = OxidePack.Data.EncryptOptions.DeserializeLengthDelimited(stream);
                        else
                            OxidePack.Data.EncryptOptions.DeserializeLengthDelimited(stream, instance.encryptOptions);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.sources.Add(OxidePack.Data.SourceFile.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.BuildRequest DeserializeLength(Stream stream, int length, OxidePack.Data.BuildRequest instance)
        {
            if (instance.sources == null)
                instance.sources = Pool.GetList<OxidePack.Data.SourceFile>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.buildOptions == null)
                            instance.buildOptions = OxidePack.Data.BuildOptions.DeserializeLengthDelimited(stream);
                        else
                            OxidePack.Data.BuildOptions.DeserializeLengthDelimited(stream, instance.buildOptions);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.encryptOptions == null)
                            instance.encryptOptions = OxidePack.Data.EncryptOptions.DeserializeLengthDelimited(stream);
                        else
                            OxidePack.Data.EncryptOptions.DeserializeLengthDelimited(stream, instance.encryptOptions);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.sources.Add(OxidePack.Data.SourceFile.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        #endregion
        #region [Methods] Writer
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, BuildRequest instance)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.buildOptions == null)
                throw new ArgumentNullException("buildOptions", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ﻿msField.SetLength(0);
            OxidePack.Data.BuildOptions.Serialize(msField, instance.buildOptions);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            stream.Write(msField.GetBuffer(), 0, (int)length1);

            if (instance.encryptOptions == null)
                throw new ArgumentNullException("encryptOptions", "Required by proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            ﻿msField.SetLength(0);
            OxidePack.Data.EncryptOptions.Serialize(msField, instance.encryptOptions);
            // Length delimited byte array
            uint length2 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
            stream.Write(msField.GetBuffer(), 0, (int)length2);

            if (instance.sources != null)
            {
                foreach (var i3 in instance.sources)
                {
                    // Key for field: 3, LengthDelimited
                    stream.WriteByte(26);
                    ﻿msField.SetLength(0);
                    OxidePack.Data.SourceFile.Serialize(msField, i3);
                    // Length delimited byte array
                    uint length3 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                    stream.Write(msField.GetBuffer(), 0, (int)length3);

                }
            }
            Pool.FreeMemoryStream(ref msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(BuildRequest instance)
        {
            var ms = Pool.Get<MemoryStream>();
            Serialize(ms, instance);
            var arr = ms.ToArray();
            Pool.FreeMemoryStream(ref ms);
            return arr;
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, BuildRequest instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public static void SerializeDelta(Stream stream, BuildRequest instance, BuildRequest previous)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.buildOptions != previous.buildOptions)
            {
                if (instance.buildOptions == null)
                    throw new ArgumentNullException("buildOptions", "Required by proto specification.");
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                ﻿msField.SetLength(0);
                OxidePack.Data.BuildOptions.SerializeDelta(msField, instance.buildOptions, previous.buildOptions);
                // Length delimited byte array
                uint length1 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                stream.Write(msField.GetBuffer(), 0, (int)length1);

            }
            if (instance.encryptOptions != previous.encryptOptions)
            {
                if (instance.encryptOptions == null)
                    throw new ArgumentNullException("encryptOptions", "Required by proto specification.");
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿msField.SetLength(0);
                OxidePack.Data.EncryptOptions.SerializeDelta(msField, instance.encryptOptions, previous.encryptOptions);
                // Length delimited byte array
                uint length2 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                stream.Write(msField.GetBuffer(), 0, (int)length2);

            }
            if (instance.sources != previous.sources)
            {
                if (instance.sources != null)
                {
                    foreach (var i3 in instance.sources)
                    {
                        // Key for field: 3, LengthDelimited
                        stream.WriteByte(26);
                        ﻿msField.SetLength(0);
                        OxidePack.Data.SourceFile.Serialize(msField, i3);
                        // Length delimited byte array
                        uint length3 = (uint)msField.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                        stream.Write(msField.GetBuffer(), 0, (int)length3);

                    }
                }
            }
            Pool.FreeMemoryStream(ref msField);
        }
        public void WriteToStream(Stream stream)
        {
            Serialize(stream, this);
        }
        public void WriteToStreamDelta(Stream stream, BuildRequest previous)
        {
            if (previous != null)
            {
                SerializeDelta(stream, this, previous);
            }
            else
            {
                Serialize(stream, this);
            }
        }
        #endregion
    }

    public partial class BuildResponse
    {
        #region [Methods] Pooled
        private bool _disposed;
        public bool ShouldPool = true;

        public virtual void Dispose()
        {
            if (this._disposed)
                return;
            this.ResetToPool();
            this._disposed = true;
        }

        public void ResetToPool()
        {
            ResetToPool(this);
        }

        public static void ResetToPool(BuildResponse instance)
        {
            if (!instance.ShouldPool)
                return;
            // [string] pluginname
            instance.pluginname = default(string);

            // [string] content
            instance.content = default(string);

            // [string] encrypted
            instance.encrypted = default(string);

            // [CompilerError] buildErrors
            if (instance.buildErrors != null)
            {
                for (int i = 0; i < instance.buildErrors.Count; i++)
                {
                    if (instance.buildErrors[i] != null)
                    {
                        instance.buildErrors[i].ResetToPool();
                        instance.buildErrors[i] = null;
                    }
                }
                List<OxidePack.Data.CompilerError> insbuildErrors = instance.buildErrors;
                Pool.FreeList<OxidePack.Data.CompilerError>(ref insbuildErrors);
                instance.buildErrors = insbuildErrors;
            }

            // [CompilerError] encryptErrors
            if (instance.encryptErrors != null)
            {
                for (int i = 0; i < instance.encryptErrors.Count; i++)
                {
                    if (instance.encryptErrors[i] != null)
                    {
                        instance.encryptErrors[i].ResetToPool();
                        instance.encryptErrors[i] = null;
                    }
                }
                List<OxidePack.Data.CompilerError> insencryptErrors = instance.encryptErrors;
                Pool.FreeList<OxidePack.Data.CompilerError>(ref insencryptErrors);
                instance.encryptErrors = insencryptErrors;
            }

            // [byte[]] compiledAssembly
            instance.compiledAssembly = default(byte[]);

            Pool.Free<OxidePack.Data.BuildResponse>(ref instance);
        }

        public virtual void EnterPool()
        {
            this._disposed = true;
        }

        public virtual void LeavePool()
        {
            this._disposed = false;
        }

        #endregion
        #region [Methods] Reader
        public void ReadFromStream(Stream stream, int size)
        {
            DeserializeLength(stream, size, this);
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BuildResponse Deserialize(Stream stream)
        {
            BuildResponse instance = Pool.Get<BuildResponse>();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BuildResponse DeserializeLengthDelimited(Stream stream)
        {
            BuildResponse instance = Pool.Get<BuildResponse>();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BuildResponse DeserializeLength(Stream stream, int length)
        {
            BuildResponse instance = Pool.Get<BuildResponse>();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static BuildResponse Deserialize(byte[] buffer)
        {
            BuildResponse instance = Pool.Get<BuildResponse>();
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static OxidePack.Data.BuildResponse Deserialize(byte[] buffer, OxidePack.Data.BuildResponse instance)
        {
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.BuildResponse Deserialize(Stream stream, OxidePack.Data.BuildResponse instance)
        {
            if (instance.buildErrors == null)
                instance.buildErrors = Pool.GetList<OxidePack.Data.CompilerError>();
            if (instance.encryptErrors == null)
                instance.encryptErrors = Pool.GetList<OxidePack.Data.CompilerError>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.pluginname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.content = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.encrypted = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.buildErrors.Add(OxidePack.Data.CompilerError.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        instance.encryptErrors.Add(OxidePack.Data.CompilerError.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        instance.compiledAssembly = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.BuildResponse DeserializeLengthDelimited(Stream stream, OxidePack.Data.BuildResponse instance)
        {
            if (instance.buildErrors == null)
                instance.buildErrors = Pool.GetList<OxidePack.Data.CompilerError>();
            if (instance.encryptErrors == null)
                instance.encryptErrors = Pool.GetList<OxidePack.Data.CompilerError>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.pluginname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.content = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.encrypted = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.buildErrors.Add(OxidePack.Data.CompilerError.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        instance.encryptErrors.Add(OxidePack.Data.CompilerError.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        instance.compiledAssembly = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.BuildResponse DeserializeLength(Stream stream, int length, OxidePack.Data.BuildResponse instance)
        {
            if (instance.buildErrors == null)
                instance.buildErrors = Pool.GetList<OxidePack.Data.CompilerError>();
            if (instance.encryptErrors == null)
                instance.encryptErrors = Pool.GetList<OxidePack.Data.CompilerError>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.pluginname = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.content = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.encrypted = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.buildErrors.Add(OxidePack.Data.CompilerError.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        instance.encryptErrors.Add(OxidePack.Data.CompilerError.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        instance.compiledAssembly = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        #endregion
        #region [Methods] Writer
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, BuildResponse instance)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.pluginname == null)
                throw new ArgumentNullException("pluginname", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.pluginname));
            if (instance.content == null)
                throw new ArgumentNullException("content", "Required by proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.content));
            if (instance.encrypted != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.encrypted));
            }
            if (instance.buildErrors != null)
            {
                foreach (var i4 in instance.buildErrors)
                {
                    // Key for field: 4, LengthDelimited
                    stream.WriteByte(34);
                    ﻿msField.SetLength(0);
                    OxidePack.Data.CompilerError.Serialize(msField, i4);
                    // Length delimited byte array
                    uint length4 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
                    stream.Write(msField.GetBuffer(), 0, (int)length4);

                }
            }
            if (instance.encryptErrors != null)
            {
                foreach (var i5 in instance.encryptErrors)
                {
                    // Key for field: 5, LengthDelimited
                    stream.WriteByte(42);
                    ﻿msField.SetLength(0);
                    OxidePack.Data.CompilerError.Serialize(msField, i5);
                    // Length delimited byte array
                    uint length5 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length5);
                    stream.Write(msField.GetBuffer(), 0, (int)length5);

                }
            }
            if (instance.compiledAssembly != null)
            {
                // Key for field: 6, LengthDelimited
                stream.WriteByte(50);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.compiledAssembly);
            }
            Pool.FreeMemoryStream(ref msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(BuildResponse instance)
        {
            var ms = Pool.Get<MemoryStream>();
            Serialize(ms, instance);
            var arr = ms.ToArray();
            Pool.FreeMemoryStream(ref ms);
            return arr;
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, BuildResponse instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public static void SerializeDelta(Stream stream, BuildResponse instance, BuildResponse previous)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.pluginname != previous.pluginname)
            {
                if (instance.pluginname == null)
                    throw new ArgumentNullException("pluginname", "Required by proto specification.");
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.pluginname));
            }
            if (instance.content != previous.content)
            {
                if (instance.content == null)
                    throw new ArgumentNullException("content", "Required by proto specification.");
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.content));
            }
            if (instance.encrypted != previous.encrypted)
            {
                if (instance.encrypted != null)
                {
                    // Key for field: 3, LengthDelimited
                    stream.WriteByte(26);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.encrypted));
                }
            }
            if (instance.buildErrors != previous.buildErrors)
            {
                if (instance.buildErrors != null)
                {
                    foreach (var i4 in instance.buildErrors)
                    {
                        // Key for field: 4, LengthDelimited
                        stream.WriteByte(34);
                        ﻿msField.SetLength(0);
                        OxidePack.Data.CompilerError.Serialize(msField, i4);
                        // Length delimited byte array
                        uint length4 = (uint)msField.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
                        stream.Write(msField.GetBuffer(), 0, (int)length4);

                    }
                }
            }
            if (instance.encryptErrors != previous.encryptErrors)
            {
                if (instance.encryptErrors != null)
                {
                    foreach (var i5 in instance.encryptErrors)
                    {
                        // Key for field: 5, LengthDelimited
                        stream.WriteByte(42);
                        ﻿msField.SetLength(0);
                        OxidePack.Data.CompilerError.Serialize(msField, i5);
                        // Length delimited byte array
                        uint length5 = (uint)msField.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length5);
                        stream.Write(msField.GetBuffer(), 0, (int)length5);

                    }
                }
            }
            if (instance.compiledAssembly != previous.compiledAssembly)
            {
                if (instance.compiledAssembly != null)
                {
                    // Key for field: 6, LengthDelimited
                    stream.WriteByte(50);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.compiledAssembly);
                }
            }
            Pool.FreeMemoryStream(ref msField);
        }
        public void WriteToStream(Stream stream)
        {
            Serialize(stream, this);
        }
        public void WriteToStreamDelta(Stream stream, BuildResponse previous)
        {
            if (previous != null)
            {
                SerializeDelta(stream, this, previous);
            }
            else
            {
                Serialize(stream, this);
            }
        }
        #endregion
    }

    public partial class BuildOptions
    {
        #region [Methods] Pooled
        private bool _disposed;
        public bool ShouldPool = true;

        public virtual void Dispose()
        {
            if (this._disposed)
                return;
            this.ResetToPool();
            this._disposed = true;
        }

        public void ResetToPool()
        {
            ResetToPool(this);
        }

        public static void ResetToPool(BuildOptions instance)
        {
            if (!instance.ShouldPool)
                return;
            // [string] name
            instance.name = default(string);

            // [PluginInfo] plugininfo
            if (instance.plugininfo != null)
            {
                instance.plugininfo.ResetToPool();
                instance.plugininfo = null;
            }

            // [bool] compileDll
            instance.compileDll = default(bool);

            // [bool] forClient
            instance.forClient = default(bool);

            Pool.Free<OxidePack.Data.BuildOptions>(ref instance);
        }

        public virtual void EnterPool()
        {
            this._disposed = true;
        }

        public virtual void LeavePool()
        {
            this._disposed = false;
        }

        #endregion
        #region [Methods] Reader
        public void ReadFromStream(Stream stream, int size)
        {
            DeserializeLength(stream, size, this);
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BuildOptions Deserialize(Stream stream)
        {
            BuildOptions instance = Pool.Get<BuildOptions>();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BuildOptions DeserializeLengthDelimited(Stream stream)
        {
            BuildOptions instance = Pool.Get<BuildOptions>();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BuildOptions DeserializeLength(Stream stream, int length)
        {
            BuildOptions instance = Pool.Get<BuildOptions>();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static BuildOptions Deserialize(byte[] buffer)
        {
            BuildOptions instance = Pool.Get<BuildOptions>();
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static OxidePack.Data.BuildOptions Deserialize(byte[] buffer, OxidePack.Data.BuildOptions instance)
        {
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.BuildOptions Deserialize(Stream stream, OxidePack.Data.BuildOptions instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.plugininfo == null)
                            instance.plugininfo = OxidePack.Data.PluginInfo.DeserializeLengthDelimited(stream);
                        else
                            OxidePack.Data.PluginInfo.DeserializeLengthDelimited(stream, instance.plugininfo);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.compileDll = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.forClient = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.BuildOptions DeserializeLengthDelimited(Stream stream, OxidePack.Data.BuildOptions instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.plugininfo == null)
                            instance.plugininfo = OxidePack.Data.PluginInfo.DeserializeLengthDelimited(stream);
                        else
                            OxidePack.Data.PluginInfo.DeserializeLengthDelimited(stream, instance.plugininfo);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.compileDll = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.forClient = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.BuildOptions DeserializeLength(Stream stream, int length, OxidePack.Data.BuildOptions instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.plugininfo == null)
                            instance.plugininfo = OxidePack.Data.PluginInfo.DeserializeLengthDelimited(stream);
                        else
                            OxidePack.Data.PluginInfo.DeserializeLengthDelimited(stream, instance.plugininfo);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.compileDll = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.forClient = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        #endregion
        #region [Methods] Writer
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, BuildOptions instance)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.name == null)
                throw new ArgumentNullException("name", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.name));
            if (instance.plugininfo == null)
                throw new ArgumentNullException("plugininfo", "Required by proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            ﻿msField.SetLength(0);
            OxidePack.Data.PluginInfo.Serialize(msField, instance.plugininfo);
            // Length delimited byte array
            uint length2 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
            stream.Write(msField.GetBuffer(), 0, (int)length2);

            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.compileDll);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.forClient);
            Pool.FreeMemoryStream(ref msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(BuildOptions instance)
        {
            var ms = Pool.Get<MemoryStream>();
            Serialize(ms, instance);
            var arr = ms.ToArray();
            Pool.FreeMemoryStream(ref ms);
            return arr;
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, BuildOptions instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public static void SerializeDelta(Stream stream, BuildOptions instance, BuildOptions previous)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.name != previous.name)
            {
                if (instance.name == null)
                    throw new ArgumentNullException("name", "Required by proto specification.");
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.name));
            }
            if (instance.plugininfo != previous.plugininfo)
            {
                if (instance.plugininfo == null)
                    throw new ArgumentNullException("plugininfo", "Required by proto specification.");
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿msField.SetLength(0);
                OxidePack.Data.PluginInfo.SerializeDelta(msField, instance.plugininfo, previous.plugininfo);
                // Length delimited byte array
                uint length2 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                stream.Write(msField.GetBuffer(), 0, (int)length2);

            }
            if (instance.compileDll != previous.compileDll)
            {
                // Key for field: 3, Varint
                stream.WriteByte(24);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.compileDll);
            }
            if (instance.forClient != previous.forClient)
            {
                // Key for field: 4, Varint
                stream.WriteByte(32);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.forClient);
            }
            Pool.FreeMemoryStream(ref msField);
        }
        public void WriteToStream(Stream stream)
        {
            Serialize(stream, this);
        }
        public void WriteToStreamDelta(Stream stream, BuildOptions previous)
        {
            if (previous != null)
            {
                SerializeDelta(stream, this, previous);
            }
            else
            {
                Serialize(stream, this);
            }
        }
        #endregion
    }

    public partial class EncryptOptions
    {
        #region [Methods] Pooled
        private bool _disposed;
        public bool ShouldPool = true;

        public virtual void Dispose()
        {
            if (this._disposed)
                return;
            this.ResetToPool();
            this._disposed = true;
        }

        public void ResetToPool()
        {
            ResetToPool(this);
        }

        public static void ResetToPool(EncryptOptions instance)
        {
            if (!instance.ShouldPool)
                return;
            // [bool] enabled
            instance.enabled = default(bool);

            // [bool] localvars
            instance.localvars = default(bool);

            // [bool] fields
            instance.fields = default(bool);

            // [bool] methods
            instance.methods = default(bool);

            // [bool] types
            instance.types = default(bool);

            // [bool] spacesremoving
            instance.spacesremoving = default(bool);

            // [bool] trashremoving
            instance.trashremoving = default(bool);

            // [bool] secret
            instance.secret = default(bool);

            // [bool] forClient
            instance.forClient = default(bool);

            Pool.Free<OxidePack.Data.EncryptOptions>(ref instance);
        }

        public virtual void EnterPool()
        {
            this._disposed = true;
        }

        public virtual void LeavePool()
        {
            this._disposed = false;
        }

        #endregion
        #region [Methods] Reader
        public void ReadFromStream(Stream stream, int size)
        {
            DeserializeLength(stream, size, this);
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static EncryptOptions Deserialize(Stream stream)
        {
            EncryptOptions instance = Pool.Get<EncryptOptions>();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static EncryptOptions DeserializeLengthDelimited(Stream stream)
        {
            EncryptOptions instance = Pool.Get<EncryptOptions>();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static EncryptOptions DeserializeLength(Stream stream, int length)
        {
            EncryptOptions instance = Pool.Get<EncryptOptions>();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static EncryptOptions Deserialize(byte[] buffer)
        {
            EncryptOptions instance = Pool.Get<EncryptOptions>();
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static OxidePack.Data.EncryptOptions Deserialize(byte[] buffer, OxidePack.Data.EncryptOptions instance)
        {
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.EncryptOptions Deserialize(Stream stream, OxidePack.Data.EncryptOptions instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.enabled = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.localvars = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.fields = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.methods = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.types = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.spacesremoving = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.trashremoving = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 8 Varint
                    case 64:
                        instance.secret = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 9 Varint
                    case 72:
                        instance.forClient = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.EncryptOptions DeserializeLengthDelimited(Stream stream, OxidePack.Data.EncryptOptions instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.enabled = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.localvars = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.fields = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.methods = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.types = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.spacesremoving = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.trashremoving = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 8 Varint
                    case 64:
                        instance.secret = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 9 Varint
                    case 72:
                        instance.forClient = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.EncryptOptions DeserializeLength(Stream stream, int length, OxidePack.Data.EncryptOptions instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.enabled = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.localvars = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.fields = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.methods = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.types = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.spacesremoving = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.trashremoving = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 8 Varint
                    case 64:
                        instance.secret = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 9 Varint
                    case 72:
                        instance.forClient = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        #endregion
        #region [Methods] Writer
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, EncryptOptions instance)
        {
            var msField = Pool.Get<MemoryStream>();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.enabled);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.localvars);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.fields);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.methods);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.types);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.spacesremoving);
            // Key for field: 7, Varint
            stream.WriteByte(56);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.trashremoving);
            // Key for field: 8, Varint
            stream.WriteByte(64);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.secret);
            // Key for field: 9, Varint
            stream.WriteByte(72);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.forClient);
            Pool.FreeMemoryStream(ref msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(EncryptOptions instance)
        {
            var ms = Pool.Get<MemoryStream>();
            Serialize(ms, instance);
            var arr = ms.ToArray();
            Pool.FreeMemoryStream(ref ms);
            return arr;
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, EncryptOptions instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public static void SerializeDelta(Stream stream, EncryptOptions instance, EncryptOptions previous)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.enabled != previous.enabled)
            {
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.enabled);
            }
            if (instance.localvars != previous.localvars)
            {
                // Key for field: 2, Varint
                stream.WriteByte(16);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.localvars);
            }
            if (instance.fields != previous.fields)
            {
                // Key for field: 3, Varint
                stream.WriteByte(24);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.fields);
            }
            if (instance.methods != previous.methods)
            {
                // Key for field: 4, Varint
                stream.WriteByte(32);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.methods);
            }
            if (instance.types != previous.types)
            {
                // Key for field: 5, Varint
                stream.WriteByte(40);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.types);
            }
            if (instance.spacesremoving != previous.spacesremoving)
            {
                // Key for field: 6, Varint
                stream.WriteByte(48);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.spacesremoving);
            }
            if (instance.trashremoving != previous.trashremoving)
            {
                // Key for field: 7, Varint
                stream.WriteByte(56);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.trashremoving);
            }
            if (instance.secret != previous.secret)
            {
                // Key for field: 8, Varint
                stream.WriteByte(64);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.secret);
            }
            if (instance.forClient != previous.forClient)
            {
                // Key for field: 9, Varint
                stream.WriteByte(72);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.forClient);
            }
            Pool.FreeMemoryStream(ref msField);
        }
        public void WriteToStream(Stream stream)
        {
            Serialize(stream, this);
        }
        public void WriteToStreamDelta(Stream stream, EncryptOptions previous)
        {
            if (previous != null)
            {
                SerializeDelta(stream, this, previous);
            }
            else
            {
                Serialize(stream, this);
            }
        }
        #endregion
    }

    public partial class PluginInfo
    {
        #region [Methods] Pooled
        private bool _disposed;
        public bool ShouldPool = true;

        public virtual void Dispose()
        {
            if (this._disposed)
                return;
            this.ResetToPool();
            this._disposed = true;
        }

        public void ResetToPool()
        {
            ResetToPool(this);
        }

        public static void ResetToPool(PluginInfo instance)
        {
            if (!instance.ShouldPool)
                return;
            // [string] name
            instance.name = default(string);

            // [string] author
            instance.author = default(string);

            // [string] version
            instance.version = default(string);

            // [string] description
            instance.description = default(string);

            // [string] baseclass
            instance.baseclass = default(string);

            Pool.Free<OxidePack.Data.PluginInfo>(ref instance);
        }

        public virtual void EnterPool()
        {
            this._disposed = true;
        }

        public virtual void LeavePool()
        {
            this._disposed = false;
        }

        #endregion
        #region [Methods] Reader
        public void ReadFromStream(Stream stream, int size)
        {
            DeserializeLength(stream, size, this);
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PluginInfo Deserialize(Stream stream)
        {
            PluginInfo instance = Pool.Get<PluginInfo>();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PluginInfo DeserializeLengthDelimited(Stream stream)
        {
            PluginInfo instance = Pool.Get<PluginInfo>();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PluginInfo DeserializeLength(Stream stream, int length)
        {
            PluginInfo instance = Pool.Get<PluginInfo>();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PluginInfo Deserialize(byte[] buffer)
        {
            PluginInfo instance = Pool.Get<PluginInfo>();
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static OxidePack.Data.PluginInfo Deserialize(byte[] buffer, OxidePack.Data.PluginInfo instance)
        {
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.PluginInfo Deserialize(Stream stream, OxidePack.Data.PluginInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.author = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.version = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.description = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.baseclass = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.PluginInfo DeserializeLengthDelimited(Stream stream, OxidePack.Data.PluginInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.author = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.version = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.description = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.baseclass = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.PluginInfo DeserializeLength(Stream stream, int length, OxidePack.Data.PluginInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.author = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.version = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.description = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.baseclass = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        #endregion
        #region [Methods] Writer
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PluginInfo instance)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.name == null)
                throw new ArgumentNullException("name", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.name));
            if (instance.author == null)
                throw new ArgumentNullException("author", "Required by proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.author));
            if (instance.version == null)
                throw new ArgumentNullException("version", "Required by proto specification.");
            // Key for field: 3, LengthDelimited
            stream.WriteByte(26);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.version));
            if (instance.description != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.description));
            }
            if (instance.baseclass == null)
                throw new ArgumentNullException("baseclass", "Required by proto specification.");
            // Key for field: 5, LengthDelimited
            stream.WriteByte(42);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.baseclass));
            Pool.FreeMemoryStream(ref msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PluginInfo instance)
        {
            var ms = Pool.Get<MemoryStream>();
            Serialize(ms, instance);
            var arr = ms.ToArray();
            Pool.FreeMemoryStream(ref ms);
            return arr;
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, PluginInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public static void SerializeDelta(Stream stream, PluginInfo instance, PluginInfo previous)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.name != previous.name)
            {
                if (instance.name == null)
                    throw new ArgumentNullException("name", "Required by proto specification.");
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.name));
            }
            if (instance.author != previous.author)
            {
                if (instance.author == null)
                    throw new ArgumentNullException("author", "Required by proto specification.");
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.author));
            }
            if (instance.version != previous.version)
            {
                if (instance.version == null)
                    throw new ArgumentNullException("version", "Required by proto specification.");
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.version));
            }
            if (instance.description != previous.description)
            {
                if (instance.description != null)
                {
                    // Key for field: 4, LengthDelimited
                    stream.WriteByte(34);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.description));
                }
            }
            if (instance.baseclass != previous.baseclass)
            {
                if (instance.baseclass == null)
                    throw new ArgumentNullException("baseclass", "Required by proto specification.");
                // Key for field: 5, LengthDelimited
                stream.WriteByte(42);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.baseclass));
            }
            Pool.FreeMemoryStream(ref msField);
        }
        public void WriteToStream(Stream stream)
        {
            Serialize(stream, this);
        }
        public void WriteToStreamDelta(Stream stream, PluginInfo previous)
        {
            if (previous != null)
            {
                SerializeDelta(stream, this, previous);
            }
            else
            {
                Serialize(stream, this);
            }
        }
        #endregion
    }

    public partial class SourceFile
    {
        #region [Methods] Pooled
        private bool _disposed;
        public bool ShouldPool = true;

        public virtual void Dispose()
        {
            if (this._disposed)
                return;
            this.ResetToPool();
            this._disposed = true;
        }

        public void ResetToPool()
        {
            ResetToPool(this);
        }

        public static void ResetToPool(SourceFile instance)
        {
            if (!instance.ShouldPool)
                return;
            // [string] filename
            instance.filename = default(string);

            // [string] content
            instance.content = default(string);

            // [string] sha256
            instance.sha256 = default(string);

            Pool.Free<OxidePack.Data.SourceFile>(ref instance);
        }

        public virtual void EnterPool()
        {
            this._disposed = true;
        }

        public virtual void LeavePool()
        {
            this._disposed = false;
        }

        #endregion
        #region [Methods] Reader
        public void ReadFromStream(Stream stream, int size)
        {
            DeserializeLength(stream, size, this);
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SourceFile Deserialize(Stream stream)
        {
            SourceFile instance = Pool.Get<SourceFile>();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SourceFile DeserializeLengthDelimited(Stream stream)
        {
            SourceFile instance = Pool.Get<SourceFile>();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SourceFile DeserializeLength(Stream stream, int length)
        {
            SourceFile instance = Pool.Get<SourceFile>();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static SourceFile Deserialize(byte[] buffer)
        {
            SourceFile instance = Pool.Get<SourceFile>();
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static OxidePack.Data.SourceFile Deserialize(byte[] buffer, OxidePack.Data.SourceFile instance)
        {
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.SourceFile Deserialize(Stream stream, OxidePack.Data.SourceFile instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.filename = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.content = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.sha256 = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.SourceFile DeserializeLengthDelimited(Stream stream, OxidePack.Data.SourceFile instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.filename = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.content = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.sha256 = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.SourceFile DeserializeLength(Stream stream, int length, OxidePack.Data.SourceFile instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.filename = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.content = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.sha256 = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        #endregion
        #region [Methods] Writer
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, SourceFile instance)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.filename == null)
                throw new ArgumentNullException("filename", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.filename));
            if (instance.content == null)
                throw new ArgumentNullException("content", "Required by proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.content));
            if (instance.sha256 == null)
                throw new ArgumentNullException("sha256", "Required by proto specification.");
            // Key for field: 3, LengthDelimited
            stream.WriteByte(26);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.sha256));
            Pool.FreeMemoryStream(ref msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(SourceFile instance)
        {
            var ms = Pool.Get<MemoryStream>();
            Serialize(ms, instance);
            var arr = ms.ToArray();
            Pool.FreeMemoryStream(ref ms);
            return arr;
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, SourceFile instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public static void SerializeDelta(Stream stream, SourceFile instance, SourceFile previous)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.filename != previous.filename)
            {
                if (instance.filename == null)
                    throw new ArgumentNullException("filename", "Required by proto specification.");
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.filename));
            }
            if (instance.content != previous.content)
            {
                if (instance.content == null)
                    throw new ArgumentNullException("content", "Required by proto specification.");
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.content));
            }
            if (instance.sha256 != previous.sha256)
            {
                if (instance.sha256 == null)
                    throw new ArgumentNullException("sha256", "Required by proto specification.");
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.sha256));
            }
            Pool.FreeMemoryStream(ref msField);
        }
        public void WriteToStream(Stream stream)
        {
            Serialize(stream, this);
        }
        public void WriteToStreamDelta(Stream stream, SourceFile previous)
        {
            if (previous != null)
            {
                SerializeDelta(stream, this, previous);
            }
            else
            {
                Serialize(stream, this);
            }
        }
        #endregion
    }

    public partial class ModuleInfo
    {
        #region [Methods] Pooled
        private bool _disposed;
        public bool ShouldPool = true;

        public virtual void Dispose()
        {
            if (this._disposed)
                return;
            this.ResetToPool();
            this._disposed = true;
        }

        public void ResetToPool()
        {
            ResetToPool(this);
        }

        public static void ResetToPool(ModuleInfo instance)
        {
            if (!instance.ShouldPool)
                return;
            // [string] name
            instance.name = default(string);

            // [string] version
            instance.version = default(string);

            // [string] description
            instance.description = default(string);

            Pool.Free<OxidePack.Data.ModuleInfo>(ref instance);
        }

        public virtual void EnterPool()
        {
            this._disposed = true;
        }

        public virtual void LeavePool()
        {
            this._disposed = false;
        }

        #endregion
        #region [Methods] Reader
        public void ReadFromStream(Stream stream, int size)
        {
            DeserializeLength(stream, size, this);
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ModuleInfo Deserialize(Stream stream)
        {
            ModuleInfo instance = Pool.Get<ModuleInfo>();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ModuleInfo DeserializeLengthDelimited(Stream stream)
        {
            ModuleInfo instance = Pool.Get<ModuleInfo>();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ModuleInfo DeserializeLength(Stream stream, int length)
        {
            ModuleInfo instance = Pool.Get<ModuleInfo>();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ModuleInfo Deserialize(byte[] buffer)
        {
            ModuleInfo instance = Pool.Get<ModuleInfo>();
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static OxidePack.Data.ModuleInfo Deserialize(byte[] buffer, OxidePack.Data.ModuleInfo instance)
        {
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.ModuleInfo Deserialize(Stream stream, OxidePack.Data.ModuleInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.version = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.description = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.ModuleInfo DeserializeLengthDelimited(Stream stream, OxidePack.Data.ModuleInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.version = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.description = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.ModuleInfo DeserializeLength(Stream stream, int length, OxidePack.Data.ModuleInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.version = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.description = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        #endregion
        #region [Methods] Writer
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ModuleInfo instance)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.name == null)
                throw new ArgumentNullException("name", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.name));
            if (instance.version == null)
                throw new ArgumentNullException("version", "Required by proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.version));
            if (instance.description != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.description));
            }
            Pool.FreeMemoryStream(ref msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ModuleInfo instance)
        {
            var ms = Pool.Get<MemoryStream>();
            Serialize(ms, instance);
            var arr = ms.ToArray();
            Pool.FreeMemoryStream(ref ms);
            return arr;
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, ModuleInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public static void SerializeDelta(Stream stream, ModuleInfo instance, ModuleInfo previous)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.name != previous.name)
            {
                if (instance.name == null)
                    throw new ArgumentNullException("name", "Required by proto specification.");
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.name));
            }
            if (instance.version != previous.version)
            {
                if (instance.version == null)
                    throw new ArgumentNullException("version", "Required by proto specification.");
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.version));
            }
            if (instance.description != previous.description)
            {
                if (instance.description != null)
                {
                    // Key for field: 3, LengthDelimited
                    stream.WriteByte(26);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.description));
                }
            }
            Pool.FreeMemoryStream(ref msField);
        }
        public void WriteToStream(Stream stream)
        {
            Serialize(stream, this);
        }
        public void WriteToStreamDelta(Stream stream, ModuleInfo previous)
        {
            if (previous != null)
            {
                SerializeDelta(stream, this, previous);
            }
            else
            {
                Serialize(stream, this);
            }
        }
        #endregion
    }

    public partial class ModuleListResponse
    {
        #region [Methods] Pooled
        private bool _disposed;
        public bool ShouldPool = true;

        public virtual void Dispose()
        {
            if (this._disposed)
                return;
            this.ResetToPool();
            this._disposed = true;
        }

        public void ResetToPool()
        {
            ResetToPool(this);
        }

        public static void ResetToPool(ModuleListResponse instance)
        {
            if (!instance.ShouldPool)
                return;
            // [ModuleInfo] modules
            if (instance.modules != null)
            {
                for (int i = 0; i < instance.modules.Count; i++)
                {
                    if (instance.modules[i] != null)
                    {
                        instance.modules[i].ResetToPool();
                        instance.modules[i] = null;
                    }
                }
                List<OxidePack.Data.ModuleInfo> insmodules = instance.modules;
                Pool.FreeList<OxidePack.Data.ModuleInfo>(ref insmodules);
                instance.modules = insmodules;
            }

            Pool.Free<OxidePack.Data.ModuleListResponse>(ref instance);
        }

        public virtual void EnterPool()
        {
            this._disposed = true;
        }

        public virtual void LeavePool()
        {
            this._disposed = false;
        }

        #endregion
        #region [Methods] Reader
        public void ReadFromStream(Stream stream, int size)
        {
            DeserializeLength(stream, size, this);
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ModuleListResponse Deserialize(Stream stream)
        {
            ModuleListResponse instance = Pool.Get<ModuleListResponse>();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ModuleListResponse DeserializeLengthDelimited(Stream stream)
        {
            ModuleListResponse instance = Pool.Get<ModuleListResponse>();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ModuleListResponse DeserializeLength(Stream stream, int length)
        {
            ModuleListResponse instance = Pool.Get<ModuleListResponse>();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ModuleListResponse Deserialize(byte[] buffer)
        {
            ModuleListResponse instance = Pool.Get<ModuleListResponse>();
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static OxidePack.Data.ModuleListResponse Deserialize(byte[] buffer, OxidePack.Data.ModuleListResponse instance)
        {
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.ModuleListResponse Deserialize(Stream stream, OxidePack.Data.ModuleListResponse instance)
        {
            if (instance.modules == null)
                instance.modules = Pool.GetList<OxidePack.Data.ModuleInfo>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.modules.Add(OxidePack.Data.ModuleInfo.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.ModuleListResponse DeserializeLengthDelimited(Stream stream, OxidePack.Data.ModuleListResponse instance)
        {
            if (instance.modules == null)
                instance.modules = Pool.GetList<OxidePack.Data.ModuleInfo>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.modules.Add(OxidePack.Data.ModuleInfo.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.ModuleListResponse DeserializeLength(Stream stream, int length, OxidePack.Data.ModuleListResponse instance)
        {
            if (instance.modules == null)
                instance.modules = Pool.GetList<OxidePack.Data.ModuleInfo>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.modules.Add(OxidePack.Data.ModuleInfo.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        #endregion
        #region [Methods] Writer
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ModuleListResponse instance)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.modules != null)
            {
                foreach (var i1 in instance.modules)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    OxidePack.Data.ModuleInfo.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    stream.Write(msField.GetBuffer(), 0, (int)length1);

                }
            }
            Pool.FreeMemoryStream(ref msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ModuleListResponse instance)
        {
            var ms = Pool.Get<MemoryStream>();
            Serialize(ms, instance);
            var arr = ms.ToArray();
            Pool.FreeMemoryStream(ref ms);
            return arr;
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, ModuleListResponse instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public static void SerializeDelta(Stream stream, ModuleListResponse instance, ModuleListResponse previous)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.modules != previous.modules)
            {
                if (instance.modules != null)
                {
                    foreach (var i1 in instance.modules)
                    {
                        // Key for field: 1, LengthDelimited
                        stream.WriteByte(10);
                        ﻿msField.SetLength(0);
                        OxidePack.Data.ModuleInfo.Serialize(msField, i1);
                        // Length delimited byte array
                        uint length1 = (uint)msField.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                        stream.Write(msField.GetBuffer(), 0, (int)length1);

                    }
                }
            }
            Pool.FreeMemoryStream(ref msField);
        }
        public void WriteToStream(Stream stream)
        {
            Serialize(stream, this);
        }
        public void WriteToStreamDelta(Stream stream, ModuleListResponse previous)
        {
            if (previous != null)
            {
                SerializeDelta(stream, this, previous);
            }
            else
            {
                Serialize(stream, this);
            }
        }
        #endregion
    }

    public partial class CompilerError
    {
        #region [Methods] Pooled
        private bool _disposed;
        public bool ShouldPool = true;

        public virtual void Dispose()
        {
            if (this._disposed)
                return;
            this.ResetToPool();
            this._disposed = true;
        }

        public void ResetToPool()
        {
            ResetToPool(this);
        }

        public static void ResetToPool(CompilerError instance)
        {
            if (!instance.ShouldPool)
                return;
            // [int] line
            instance.line = default(int);

            // [int] column
            instance.column = default(int);

            // [int] lineEnd
            instance.lineEnd = default(int);

            // [int] columnEnd
            instance.columnEnd = default(int);

            // [string] errorText
            instance.errorText = default(string);

            Pool.Free<OxidePack.Data.CompilerError>(ref instance);
        }

        public virtual void EnterPool()
        {
            this._disposed = true;
        }

        public virtual void LeavePool()
        {
            this._disposed = false;
        }

        #endregion
        #region [Methods] Reader
        public void ReadFromStream(Stream stream, int size)
        {
            DeserializeLength(stream, size, this);
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CompilerError Deserialize(Stream stream)
        {
            CompilerError instance = Pool.Get<CompilerError>();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CompilerError DeserializeLengthDelimited(Stream stream)
        {
            CompilerError instance = Pool.Get<CompilerError>();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CompilerError DeserializeLength(Stream stream, int length)
        {
            CompilerError instance = Pool.Get<CompilerError>();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CompilerError Deserialize(byte[] buffer)
        {
            CompilerError instance = Pool.Get<CompilerError>();
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static OxidePack.Data.CompilerError Deserialize(byte[] buffer, OxidePack.Data.CompilerError instance)
        {
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.CompilerError Deserialize(Stream stream, OxidePack.Data.CompilerError instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.line = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.column = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.lineEnd = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.columnEnd = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.errorText = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.CompilerError DeserializeLengthDelimited(Stream stream, OxidePack.Data.CompilerError instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.line = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.column = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.lineEnd = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.columnEnd = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.errorText = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.CompilerError DeserializeLength(Stream stream, int length, OxidePack.Data.CompilerError instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.line = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.column = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.lineEnd = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.columnEnd = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.errorText = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        #endregion
        #region [Methods] Writer
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CompilerError instance)
        {
            var msField = Pool.Get<MemoryStream>();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.line);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.column);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.lineEnd);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.columnEnd);
            if (instance.errorText == null)
                throw new ArgumentNullException("errorText", "Required by proto specification.");
            // Key for field: 5, LengthDelimited
            stream.WriteByte(42);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.errorText));
            Pool.FreeMemoryStream(ref msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CompilerError instance)
        {
            var ms = Pool.Get<MemoryStream>();
            Serialize(ms, instance);
            var arr = ms.ToArray();
            Pool.FreeMemoryStream(ref ms);
            return arr;
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CompilerError instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public static void SerializeDelta(Stream stream, CompilerError instance, CompilerError previous)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.line != previous.line)
            {
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.line);
            }
            if (instance.column != previous.column)
            {
                // Key for field: 2, Varint
                stream.WriteByte(16);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.column);
            }
            if (instance.lineEnd != previous.lineEnd)
            {
                // Key for field: 3, Varint
                stream.WriteByte(24);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.lineEnd);
            }
            if (instance.columnEnd != previous.columnEnd)
            {
                // Key for field: 4, Varint
                stream.WriteByte(32);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.columnEnd);
            }
            if (instance.errorText != previous.errorText)
            {
                if (instance.errorText == null)
                    throw new ArgumentNullException("errorText", "Required by proto specification.");
                // Key for field: 5, LengthDelimited
                stream.WriteByte(42);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.errorText));
            }
            Pool.FreeMemoryStream(ref msField);
        }
        public void WriteToStream(Stream stream)
        {
            Serialize(stream, this);
        }
        public void WriteToStreamDelta(Stream stream, CompilerError previous)
        {
            if (previous != null)
            {
                SerializeDelta(stream, this, previous);
            }
            else
            {
                Serialize(stream, this);
            }
        }
        #endregion
    }

}
