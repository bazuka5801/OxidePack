// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using OxidePack;

namespace OxidePack.Data
{
    public partial class UserInformation
    {
        #region [Methods] Pooled
        private bool _disposed;
        public bool ShouldPool = true;

        public virtual void Dispose()
        {
            if (this._disposed)
                return;
            this.ResetToPool();
            this._disposed = true;
        }

        public void ResetToPool()
        {
            ResetToPool(this);
        }

        public static void ResetToPool(UserInformation instance)
        {
            if (!instance.ShouldPool)
                return;
            // [string] key
            instance.key = default(string);

            // [string] username
            instance.username = default(string);

            Pool.Free<OxidePack.Data.UserInformation>(ref instance);
        }

        public virtual void EnterPool()
        {
            this._disposed = true;
        }

        public virtual void LeavePool()
        {
            this._disposed = false;
        }

        #endregion
        #region [Methods] Reader
        public void ReadFromStream(Stream stream, int size)
        {
            DeserializeLength(stream, size, this);
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static UserInformation Deserialize(Stream stream)
        {
            UserInformation instance = Pool.Get<UserInformation>();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static UserInformation DeserializeLengthDelimited(Stream stream)
        {
            UserInformation instance = Pool.Get<UserInformation>();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static UserInformation DeserializeLength(Stream stream, int length)
        {
            UserInformation instance = Pool.Get<UserInformation>();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static UserInformation Deserialize(byte[] buffer)
        {
            UserInformation instance = Pool.Get<UserInformation>();
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static OxidePack.Data.UserInformation Deserialize(byte[] buffer, OxidePack.Data.UserInformation instance)
        {
            var ms = Pool.Get<MemoryStream>();
            ms.Write(buffer, 0 ,buffer.Length);
            ms.Position = 0;
            Deserialize(ms, instance);
            Pool.FreeMemoryStream(ref ms);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.UserInformation Deserialize(Stream stream, OxidePack.Data.UserInformation instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.UserInformation DeserializeLengthDelimited(Stream stream, OxidePack.Data.UserInformation instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static OxidePack.Data.UserInformation DeserializeLength(Stream stream, int length, OxidePack.Data.UserInformation instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        #endregion
        #region [Methods] Writer
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, UserInformation instance)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.key == null)
                throw new ArgumentNullException("key", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.key));
            if (instance.username == null)
                throw new ArgumentNullException("username", "Required by proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.username));
            Pool.FreeMemoryStream(ref msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(UserInformation instance)
        {
            var ms = Pool.Get<MemoryStream>();
            Serialize(ms, instance);
            var arr = ms.ToArray();
            Pool.FreeMemoryStream(ref ms);
            return arr;
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, UserInformation instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public static void SerializeDelta(Stream stream, UserInformation instance, UserInformation previous)
        {
            var msField = Pool.Get<MemoryStream>();
            if (instance.key != previous.key)
            {
                if (instance.key == null)
                    throw new ArgumentNullException("key", "Required by proto specification.");
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.key));
            }
            if (instance.username != previous.username)
            {
                if (instance.username == null)
                    throw new ArgumentNullException("username", "Required by proto specification.");
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.username));
            }
            Pool.FreeMemoryStream(ref msField);
        }
        public void WriteToStream(Stream stream)
        {
            Serialize(stream, this);
        }
        public void WriteToStreamDelta(Stream stream, UserInformation previous)
        {
            if (previous != null)
            {
                SerializeDelta(stream, this, previous);
            }
            else
            {
                Serialize(stream, this);
            }
        }
        #endregion
    }

}
